/* eslint no-mixed-operators: "off" */
const nanoid = require('nanoid');
const { States } = require('@fpm/constants');
const { ObjectId, User } = require('@fpm/db');
const { testingBeforeAll, testingAfterAll, testFunc, nockHydraTokenIntrospect } = require('../../utils/testing');

beforeAll(testingBeforeAll());
afterAll(testingAfterAll());

test('should identify user with identity scope', async () => {
  const dbUserId = new ObjectId();
  const dbUser = await User.create({
    _id: dbUserId,
    auth0Id: nanoid(32),
    actorId: nanoid(32),
    name: 'user name',
    image: 'image',
    email: 'user@domain.com',
    state: States.user.enabled.code
  });

  const { token } = nockHydraTokenIntrospect({
    active: true,
    scope: 'identity',
    userId: dbUser._id.toString()
  });

  const reply = await testFunc({
    name: 'users.identity',
    req: {
      qs: { access_token: token }
    }
  });

  expect(reply).toBeTruthy();
  expect(reply.statusCode).toBe(200);
  expect(reply.body).toBeTruthy();
  expect(reply.body.ok).toBe(true);
  expect(reply.body.user).toEqual({
    user_id: dbUser._id.toString(),
    name: dbUser.name,
    email: dbUser.email,
    avatar: dbUser.image
  });
});

test('should identify user with identity.basic scope', async () => {
  const dbUserId = new ObjectId();
  const dbUser = await User.create({
    _id: dbUserId,
    auth0Id: nanoid(32),
    actorId: nanoid(32),
    name: 'user name',
    image: 'image',
    email: 'user@domain.com',
    state: States.user.enabled.code
  });

  const { token } = nockHydraTokenIntrospect({
    active: true,
    scope: 'identity.basic',
    userId: dbUser._id.toString()
  });

  const reply = await testFunc({
    name: 'users.identity',
    req: {
      qs: { access_token: token }
    }
  });

  expect(reply).toBeTruthy();
  expect(reply.statusCode).toBe(200);
  expect(reply.body).toBeTruthy();
  expect(reply.body.ok).toBe(true);
  expect(reply.body.user).toEqual({
    user_id: dbUser._id.toString(),
    name: dbUser.name
  });
});

test('should identify user with identity.basic+identity.email scope', async () => {
  const dbUserId = new ObjectId();
  const dbUser = await User.create({
    _id: dbUserId,
    auth0Id: nanoid(32),
    actorId: nanoid(32),
    name: 'user name',
    image: 'image',
    email: 'user@domain.com',
    state: States.user.enabled.code
  });

  const { token } = nockHydraTokenIntrospect({
    active: true,
    scope: 'identity.basic identity.email',
    userId: dbUser._id.toString()
  });

  const reply = await testFunc({
    name: 'users.identity',
    req: {
      qs: { access_token: token }
    }
  });

  expect(reply).toBeTruthy();
  expect(reply.statusCode).toBe(200);
  expect(reply.body).toBeTruthy();
  expect(reply.body.ok).toBe(true);
  expect(reply.body.user).toEqual({
    user_id: dbUser._id.toString(),
    name: dbUser.name,
    email: dbUser.email
  });
});

test('should identify user with identity.basic+identity.email+identity.avatar scope', async () => {
  const dbUserId = new ObjectId();
  const dbUser = await User.create({
    _id: dbUserId,
    auth0Id: nanoid(32),
    actorId: nanoid(32),
    name: 'user name',
    image: 'image',
    email: 'user@domain.com',
    state: States.user.enabled.code
  });

  const { token } = nockHydraTokenIntrospect({
    active: true,
    scope: 'identity.basic identity.email identity.avatar',
    userId: dbUser._id.toString()
  });

  const reply = await testFunc({
    name: 'users.identity',
    req: {
      qs: { access_token: token }
    }
  });

  expect(reply).toBeTruthy();
  expect(reply.statusCode).toBe(200);
  expect(reply.body).toBeTruthy();
  expect(reply.body.ok).toBe(true);
  expect(reply.body.user).toEqual({
    user_id: dbUser._id.toString(),
    name: dbUser.name,
    email: dbUser.email,
    avatar: dbUser.image
  });
});
