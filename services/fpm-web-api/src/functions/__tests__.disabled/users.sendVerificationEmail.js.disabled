/* eslint no-mixed-operators: "off" */
const moment = require('moment-timezone');
const nanoid = require('nanoid');
const { States } = require('@fpm/constants');
const { ObjectId, User, EmailVerify } = require('@fpm/db');
const { testingBeforeAll, testingAfterAll, testFunc, nockHydraTokenIntrospect } = require('../../utils/testing');

beforeAll(testingBeforeAll());
afterAll(testingAfterAll());

beforeEach(async () => Promise.all(await EmailVerify.find().exec(), q => q.remove()));

test('should create email verification with redirect', async () => {
  const now = new Date();
  const dbUserId = new ObjectId();
  const dbTeamId = new ObjectId();
  await User.create({
    _id: dbUserId,
    auth0Id: nanoid(32),
    actorId: nanoid(32),
    name: 'user name',
    image: 'image',
    email: 'ab@gmail.com',
    created: now,
    state: States.user.enabled.code,
    profiles: { contributor: [dbTeamId] }
  });

  const { token } = nockHydraTokenIntrospect({
    active: true,
    scope: 'admin',
    userId: dbUserId.toString()
  });

  const reply = await testFunc({
    name: 'users.sendVerificationEmail',
    req: {
      qs: { access_token: token, redirect: 'http://redirect' }
    }
  });

  expect(reply).toBeTruthy();
  expect(reply.statusCode).toBe(200);
  expect(reply.body).toBeTruthy();
  expect(reply.body.ok).toBe(true);
  expect(reply.body.user_id).toBe(dbUserId.toString());
  expect(reply.body.verify_id).toBeTruthy();
  expect(reply.body.verify_link).toBeTruthy();
  expect(reply.body.verify_link).toEqual(
    expect.stringMatching(/^https:\/\/api\.friendsplus\.me\/users\.verifyEmail\?id=[0-9a-f]+$/)
  );

  const list = await EmailVerify.find({ uid: dbUserId }).exec();
  expect(list).toBeTruthy();
  expect(list.length).toBe(1);
  expect(list[0].id).toBe(reply.body.verify_id);
  expect(list[0].redirectUrl).toBe('http://redirect');
});

test('should create email verification without redirect', async () => {
  const now = new Date();
  const dbUserId = new ObjectId();
  const dbTeamId = new ObjectId();
  await User.create({
    _id: dbUserId,
    auth0Id: nanoid(32),
    actorId: nanoid(32),
    name: 'user name',
    image: 'image',
    email: 'ab@gmail.com',
    created: now,
    state: States.user.enabled.code,
    profiles: { contributor: [dbTeamId] }
  });

  const { token } = nockHydraTokenIntrospect({
    active: true,
    scope: 'admin',
    userId: dbUserId.toString()
  });

  const reply = await testFunc({
    name: 'users.sendVerificationEmail',
    req: {
      qs: { access_token: token }
    }
  });

  expect(reply).toBeTruthy();
  expect(reply.statusCode).toBe(200);
  expect(reply.body).toBeTruthy();
  expect(reply.body.ok).toBe(true);
  expect(reply.body.user_id).toBe(dbUserId.toString());
  expect(reply.body.verify_id).toBeTruthy();
  expect(reply.body.verify_link).toBeTruthy();
  expect(reply.body.verify_link).toEqual(
    expect.stringMatching(/^https:\/\/api\.friendsplus\.me\/users\.verifyEmail\?id=[0-9a-f]+$/)
  );

  const list = await EmailVerify.find({ uid: dbUserId }).exec();
  expect(list).toBeTruthy();
  expect(list.length).toBe(1);
  expect(list[0].id).toBe(reply.body.verify_id);
  expect(list[0].redirectUrl).toBeFalsy();
});

test('creation of email verification should fail on daily limit', async () => {
  const now = new Date();
  const dbUserId = new ObjectId();
  const dbTeamId = new ObjectId();
  await User.create({
    _id: dbUserId,
    auth0Id: nanoid(32),
    actorId: nanoid(32),
    name: 'user name',
    image: 'image',
    email: 'ab@gmail.com',
    created: now,
    state: States.user.enabled.code,
    profiles: { contributor: [dbTeamId] }
  });

  const { token } = nockHydraTokenIntrospect({
    active: true,
    scope: 'admin',
    userId: dbUserId.toString()
  });

  await new EmailVerify({
    uid: dbUserId,
    createdAt: moment
      .utc()
      .subtract(1, 'weeks')
      .toDate()
  }).save();

  for (let i = 0; i < 20; i++) {
    // eslint-disable-next-line no-await-in-loop
    await new EmailVerify({ uid: dbUserId }).save();
  }

  const reply = await testFunc({
    name: 'users.sendVerificationEmail',
    req: {
      qs: { access_token: token }
    }
  });

  expect(reply).toBeTruthy();
  expect(reply.statusCode).toBe(200);
  expect(reply.body).toBeTruthy();
  expect(reply.body).toEqual({
    ok: false,
    error: 'invalid_request',
    error_description: `Daily limit of user "${dbUserId.toString()}" verifications(20) reached`
  });

  const list = await EmailVerify.find({ uid: dbUserId }).exec();
  expect(list).toBeTruthy();
  expect(list.length).toBe(21);
});
