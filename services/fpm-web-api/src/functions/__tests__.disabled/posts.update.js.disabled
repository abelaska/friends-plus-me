const nanoid = require('nanoid');
const { States, Types } = require('@fpm/constants');
const { ObjectId, User, Profile, Post } = require('@fpm/db');
const { testingBeforeAll, testingAfterAll, testFunc, nockHydraTokenIntrospect } = require('../../utils/testing');

beforeAll(testingBeforeAll());
afterAll(testingAfterAll());

test('should schedule a post', async () => {
  const dbUserId = new ObjectId();
  const dbTeamId = new ObjectId();
  const dbQueueId = new ObjectId();
  const dbUser = await User.create({
    _id: dbUserId,
    auth0Id: nanoid(32),
    actorId: nanoid(32),
    state: States.user.enabled.code,
    profiles: { owner: [dbTeamId] }
  });
  const dbTeam = await Profile.create({
    _id: dbTeamId,
    members: { owner: [dbUserId] },
    accounts: [
      {
        _id: dbQueueId,
        uid: nanoid(32),
        network: Types.network.google.code,
        account: Types.account.page.code,
        scheduling: { tz: 'Europe/Prague', schedules: [[0]] }
      }
    ]
  });

  const html = '<p>html</p>';

  const { token: infoToken } = nockHydraTokenIntrospect({
    active: true,
    scope: 'posts.schedule',
    userId: dbUser._id.toString()
  });

  let reply = await testFunc({
    name: 'posts.create',
    req: { method: 'POST', qs: { access_token: infoToken, queue: dbQueueId.toString() }, body: { html } }
  });
  expect(reply).toBeTruthy();
  expect(reply.statusCode).toBe(200);
  expect(reply.body).toBeTruthy();
  expect(reply.body.ok).toBe(true);
  expect(reply.body.post).toBeTruthy();
  expect(reply.body.post.queue_id).toBe(dbQueueId.toString());
  expect(reply.body.post.team_id).toBe(dbTeamId.toString());
  expect(reply.body.post.state).toBe('scheduled');
  expect(reply.body.post.html).toBe(html);
  expect(reply.body.post.created_by).toBeTruthy();
  expect(reply.body.post.created_by.user_id).toBe(dbUser._id.toString());
  expect(reply.body.post.modified_by).toBeFalsy();
  expect(reply.body.post.service).toEqual({ id: dbTeam.accounts[0].uid, type: 'google', category: 'page' });

  const dbPost = await Post.findById(reply.body.post.post_id).exec();
  expect(dbPost).toBeTruthy();
  expect(dbPost.html).toBe(html);
  expect(dbPost.source).toBe('api');
  expect(dbPost.appendNoShare).toBe(true);
  expect(dbPost.processor).toBe('post:google:page');
  expect(dbPost.state).toBe(States.post.scheduledByUser.code);

  // update post

  const { token: updateToken } = nockHydraTokenIntrospect({
    active: true,
    scope: 'posts.write',
    userId: dbUser._id.toString()
  });

  const newHtml = '<p>new html</p>';

  reply = await testFunc({
    name: 'posts.update',
    req: { method: 'POST', qs: { access_token: updateToken, post: dbPost._id.toString() }, body: { html: newHtml } }
  });
  expect(reply).toBeTruthy();
  expect(reply.statusCode).toBe(200);
  expect(reply.body).toBeTruthy();
  expect(reply.body.ok).toBe(true);
  expect(reply.body.post).toBeTruthy();
  expect(reply.body.post.html).toBe(newHtml);

  const dbPostUpdated = await Post.findById(reply.body.post.post_id).exec();
  expect(dbPostUpdated).toBeTruthy();
  expect(dbPostUpdated.html).toBe(newHtml);
});
