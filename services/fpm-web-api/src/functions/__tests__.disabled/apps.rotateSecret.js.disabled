const nanoid = require('nanoid');
const { States } = require('@fpm/constants');
const { User, OAuthApp } = require('@fpm/db');
const {
  testingDeps,
  testingBeforeAll,
  testingAfterAll,
  testFunc,
  nockHydraCreateApplication,
  nockHydraUpdateApplication
} = require('../../utils/testing');

beforeAll(testingBeforeAll());
afterAll(testingAfterAll());

test('should rotate application secret', async () => {
  const { cryptor } = testingDeps();
  const user = await User.create({ auth0Id: nanoid(32), actorId: nanoid(32), state: States.user.enabled.code });

  const client = {
    name: nanoid(32),
    description: 'app description',
    url: 'https://domain.com',
    callbacks: ['https://domain.com/callback']
  };

  const { token } = nockHydraCreateApplication({
    client,
    active: true,
    scope: 'apps',
    userId: user._id.toString()
  });

  const reply = await testFunc({
    name: 'apps.create',
    req: {
      method: 'POST',
      qs: { access_token: token },
      body: client
    }
  });

  expect(reply).toBeTruthy();
  const { body } = reply;
  expect(body).toBeTruthy();
  expect(body.ok).toBe(true);

  const { app } = body;
  expect(app).toBeTruthy();
  expect(app.app_id).toBeTruthy();

  const { token: updateToken } = nockHydraUpdateApplication({
    client,
    active: true,
    scope: 'apps',
    clientId: app.client_id,
    clientSecret: app.client_secret,
    userId: user._id.toString()
  });

  const rotateReply = await testFunc({
    name: 'apps.rotateSecret',
    req: { qs: { access_token: updateToken, app: app.app_id } }
  });

  expect(rotateReply).toBeTruthy();
  expect(rotateReply.body).toBeTruthy();
  expect(rotateReply.body.ok).toBe(true);
  expect(rotateReply.body.app).toBeTruthy();

  const dbOAuthApp = await OAuthApp.findById(app.app_id).exec();
  expect(dbOAuthApp).toBeTruthy();

  const expectApp = Object.assign({}, app, { client_secret: cryptor.decrypt(dbOAuthApp.clientSecret) });
  expect(rotateReply.body.app).toEqual(expectApp);
});
