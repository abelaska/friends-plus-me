const nanoid = require('nanoid');
const { States } = require('@fpm/constants');
const { User } = require('@fpm/db');
const { testingBeforeAll, testingAfterAll, testFuncWithReply, nockHydraTokenIntrospect } = require('../testing');

beforeAll(testingBeforeAll());
afterAll(testingAfterAll());

test('should fail on invalid_auth', async () => {
  const { token } = nockHydraTokenIntrospect({ active: false });

  await testFuncWithReply({
    name: 'apps.create',
    req: {
      method: 'POST',
      qs: { access_token: token },
      body: {
        name: 'test',
        url: 'https://domain.com',
        callbacks: ['https://domain.com/callback']
      }
    },
    statusCode: 200,
    res: {
      ok: false,
      error: 'invalid_auth'
    }
  });
});

test('should fail on user_not_found', async () => {
  const { token } = nockHydraTokenIntrospect({
    active: true,
    scope: 'admin offline',
    userId: 'invalid-user-id'
  });

  await testFuncWithReply({
    name: 'apps.create',
    req: {
      method: 'POST',
      qs: { access_token: token },
      body: {
        name: 'test',
        url: 'https://domain.com',
        callbacks: ['https://domain.com/callback']
      }
    },
    statusCode: 200,
    res: {
      ok: false,
      error: 'user_not_found'
    }
  });
});

test('should fail on user_inactive', async () => {
  const user = await User.create({ auth0Id: nanoid(32), actorId: nanoid(32), state: States.user.blocked.code });

  const { token } = nockHydraTokenIntrospect({
    active: true,
    scope: 'admin offline',
    userId: user._id.toString()
  });

  await testFuncWithReply({
    name: 'apps.create',
    req: {
      method: 'POST',
      qs: { access_token: token },
      body: {
        name: 'test',
        url: 'https://domain.com',
        callbacks: ['https://domain.com/callback']
      }
    },
    statusCode: 200,
    res: {
      ok: false,
      error: 'user_inactive'
    }
  });
});

test('should fail on invalid scope', async () => {
  const user = await User.create({ auth0Id: nanoid(32), actorId: nanoid(32), state: States.user.enabled.code });

  const { token } = nockHydraTokenIntrospect({
    active: true,
    scope: 'admin offline',
    userId: user._id.toString()
  });

  await testFuncWithReply({
    name: 'apps.create',
    req: {
      method: 'POST',
      qs: { access_token: token },
      body: {
        name: 'test',
        url: 'https://domain.com',
        callbacks: ['https://domain.com/callback']
      }
    },
    statusCode: 200,
    res: {
      ok: false,
      error: 'access_denied'
    }
  });
});
