---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb
data:
  mongo.conf: |
    storage:
      dbPath: /data/db
  ensure-users.js: |
    const targetDbStr = 'fpm';
    const rootUser = cat('/etc/mongodb/admin/MONGO_ROOT_USERNAME');
    const rootPass = cat('/etc/mongodb/admin/MONGO_ROOT_PASSWORD');
    const usersStr = cat('/etc/mongodb/MONGO_USERS_LIST'); // user1:role1A,role1B:pass1[;user2:role2A,role2B:pass2...]

    // auth against admin
    const adminDb = db.getSiblingDB('admin');
    adminDb.auth(rootUser, rootPass);
    print('Successfully authenticated admin user');

    // we'll create the users here
    const targetDb = db.getSiblingDB(targetDbStr);

    // create database
    targetDb.startup.insert({ at: new Date() });

    // user-defined roles should be stored in the admin db
    const customRoles = adminDb
      .getRoles({rolesInfo: 1, showBuiltinRoles: false})
      .map(role => role.role)
      .filter(Boolean);

    // parse the list of users, and create each user as needed
    usersStr
      .trim()
      .split(';')
      .map(s => s.split(':'))
      .forEach(user => {
        const username = user[0];
        const rolesStr = user[1];
        const password = user[2];

        if (!rolesStr || !password) {
          return;
        }

        const roles = rolesStr.split(',');
        const userDoc = {
          user: username,
          pwd: password,
        };

        userDoc.roles = roles.map(role => {
          if (!~customRoles.indexOf(role)) {
            // is this a user defined role?
            return role; // no, it is built-in, just use the role name
          }
          return {role: role, db: 'admin'}; // yes, user-defined, specify the long format
        });

        try {
          targetDb.createUser(userDoc);
        } catch (err) {
          if (!~err.message.toLowerCase().indexOf('duplicate')) {
            // if not a duplicate user
            throw err; // rethrow
          }
        }
      });

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb
spec:
  serviceName: database
  replicas: 1
  selector:
    matchLabels:
      app: database
  template:
    metadata:
      labels:
        app: database
        selector: mongodb
    spec:
      containers:
        - name: mongodb
          image: mongo:3.2.21
          resources:
            requests:
              memory: "1Gi"
              cpu: "100m"
            limits:
              memory: "5Gi"
              cpu: "1500m"
          env:
            - name: MONGO_INITDB_DATABASE
              value: fpm
            - name: MONGO_INITDB_ROOT_USERNAME_FILE
              value: /etc/mongodb/admin/MONGO_ROOT_USERNAME
            - name: MONGO_INITDB_ROOT_PASSWORD_FILE
              value: /etc/mongodb/admin/MONGO_ROOT_PASSWORD
          volumeMounts:
            - name: mongodb
              mountPath: /etc/mongodb
              readOnly: true
            - name: mongodb-scripts
              mountPath: /docker-entrypoint-initdb.d
              readOnly: true
            - name: mongodb-conf
              mountPath: /config
              readOnly: true
            - name: mongodb-data
              mountPath: /data/db
      volumes:
        - name: mongodb
          secret:
            secretName: mongodb
            items:
              - key: MONGO_ROOT_USERNAME
                path: admin/MONGO_ROOT_USERNAME
                mode: 0444
              - key: MONGO_ROOT_PASSWORD
                path: admin/MONGO_ROOT_PASSWORD
                mode: 0444
              - key: MONGO_USERS_LIST
                path: MONGO_USERS_LIST
                mode: 0444
        - name: mongodb-scripts
          configMap:
            name: mongodb
            items:
              - key: ensure-users.js
                path: ensure-users.js
        - name: mongodb-conf
          configMap:
            name: mongodb
            items:
              - key: mongo.conf
                path: mongo.conf
        - name: mongodb-data
          persistentVolumeClaim:
            claimName: mongodb

---
apiVersion: v1
kind: Secret
metadata:
  name: mongodb
type: Opaque
data:
  MONGO_ROOT_USERNAME: XXX
  MONGO_ROOT_PASSWORD: XXX
  MONGO_USERS_LIST: XXX

---
apiVersion: v1
kind: Service
metadata:
  name: database
  labels:
    app: database
spec:
  clusterIP: None
  selector:
    app: database
  ports:
    - port: 27017
