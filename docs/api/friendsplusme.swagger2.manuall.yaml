swagger: '2.0'
info:
  version: '1.0'
  title: Friends+Me API (Swagger 2.0)
  description: >-
    Friends+Me provides API to manage your account resources such as teams,
    queues, posts and drafts.


    The Friends+Me API allows you to build applications that interact with
    Friends+Me in more complex ways than the integrations we provide out of the
    box.


    ## Basics


    The API consists of HTTP RPC-style functions, all of the form
    https://api.friendsplus.me/FUNCTION.


    All functions must be called using HTTPS. Arguments can be passed as GET or
    POST params, or a mix. The response contains a JSON object, which will
    always contain a top-level boolean property `ok`, indicating success or
    failure. For failure results, the `error` property will contain a short
    machine-readable error code. In the case of problematic calls that could
    still be completed successfully, `ok` will be true.


    ```

    {
        "ok": true,
        "stuff": "This is good"
    }

    ```


    ```

    {
        "ok": false,
        "error": "something_bad"
    }

    ```


    Other properties are defined in the documentation for the relevant function.


    ### Output JSON formatting


    You can add parameter `pretty` with value `true` to the request url, data
    output will include line breaks and indentation to make it more readable.


    If set to `false` or not present, unnecessary whitespace is removed,
    reducing the size of the response. Defaults to `false`.


    ### Appending Scopes


    As you make API requests, a X-OAuth-Scopes HTTP header will be returned with
    every response indicating which scopes the calling token currently has:


    ```

    X-OAuth-Scopes: identity.basic,identity.email,identity.avatar

    ```


    ## API Rate Limits


    ### Per User or Per Application


    Rate limiting of the API is primarily on a per-user basis, more accurately
    described, per-user limit is applied if access token is used.


    Per-user limit is 200 API requests per 100 seconds.


    When using application-only authentication ([oauth.*](#reference/oauth)
    functions), rate limits are determined globally for the entire application.
    This limit is considered completely separately from per-user limits.


    Per-application limit is 1000 API requests per 100 seconds.


    ### HTTP-based APIs


    Use the HTTP headers in order to understand where the application is at for
    a given rate limit, on the method that was just utilized. Every response
    contains these headers.


    * `x-rate-limit-limit` - the rate limit ceiling for that given endpoint


    * `x-rate-limit-remaining` - the number of requests left for the 100 second
    or 24 hour window


    * `x-rate-limit-reset` - the remaining window before the rate limit resets,
    in UTC [epoch seconds](http://en.wikipedia.org/wiki/Unix_time)


    For example:


    ```

    HTTP/1.1 200 OK

    Content-Type: application/json

    X-RateLimit-Limit: 500

    X-RateLimit-Remaining: 499

    X-RateLimit-Reset: 1392815263


    {
      "foo": "bar"
    }

    ```


    If you go over these limits when using our HTTP based APIs, Friends+Me will
    start returning a `HTTP 429 Too Many Requests` error, a `Retry-After` header
    containing the number of seconds until you can retry and error body:


    ```

    HTTP/1.1 429 TOO MANY REQUESTS

    Content-Type: application/json

    X-RateLimit-Limit: 500

    X-RateLimit-Remaining: 0

    X-RateLimit-Reset: 1392815263

    Retry-After: 50


    {
        ok: false,
        error: 'rate_limit',
        error_description: `Rate limit "user" exceeded, retry in 50 seconds`
    }

    ```


    ### Other functionality


    We reserve the right to rate limit other functionality to prevent abuse,
    spam, denial-of-service attacks, or other security issues. Where possible
    we'll return a descriptive error message, but the nature of this type of
    rate limiting often prevents us from providing more information.


    ## Pagination


    ### Paginating through collections


    Throughout the Friends+Me platform you'll often encounter collections of
    things. Lists of teams. Arrays of queues.


    Very few of these collections are paginated today. Instead, you're likely to
    receive everything in the collection. Some collections are enormous and
    instead of receiving all of it, you'll receive it truncated instead, for
    example posts.


    #### Timeline functions


    These functions are more positional than page oriented and allow you to
    navigate through time with `oldest`, `latest`, and a special `inclusive`
    parameter.


    #### Traditional paging


    These functions use some form of archaic numeric-based `page` and `count` or
    other limiting parameters.


    ## Using OAuth 2.0


    OAuth 2.0 is a protocol that lets your app request authorization to private
    details in a user's Friends+Me account without getting their password.


    You'll need to [register your app](https://developers.friendsplus.me/apps)
    before getting started. A registered app is assigned a unique Client ID and
    Client Secret which will be used in the OAuth flow. The Client Secret should
    not be shared.


    Friends+Me uses OAuth 2.0's [authorization code
    grant](https://tools.ietf.org/html/rfc6749#section-4.1) and [refresh token
    grant](https://tools.ietf.org/html/rfc6749#section-1.5) to issue access
    tokens on behalf of users.


    ### Step 1 - Authorization


    Your web or mobile app should redirect users to the following URL:


    `https://api.friendsplus.me/oauth.authorize`


    The following values should be passed as GET parameters:


    + Parameters
        + `client_id`: CLIENT_ID (string) - Your application's Client ID.
        + `scope`: admin offline (string) - The scopes which you want to request authorization for. These must be separated by a space. You can request any scopes supported by the Friends+Me API (for example, read, write, ...). Include **offline** to get a refresh token.
        + `response_type`: code (string) - Indicates to Friends+Me which OAuth 2.0 flow you want to perform. Use **code** for Authorization Code Grant Flow.
        + `redirect_uri`: https://myapp.com/callback (URL, required) - The URL to which Friends+Me will redirect the browser after authorization has been granted by the user.
        + `state`: RANDOM_STATE (string,optional) - An opaque value the clients adds to the initial request that Friends+Me includes when redirecting the back to the client. This value must be used by the client to prevent CSRF attacks.
        + `prompt` (string,optional) - prompt control.
            + **prompt=consent** will force users to provide consent, even if they have an existing user grant for that client and requested scopes.
            + **prompt=none** is a workaround to improve user experience. This will not display the login dialog or the consent dialog. In addition to that if you call /oauth.authorize from a hidden iframe and extract the new access token from the parent frame, then the user will not see the redirects happening.

    ### Step 2 - Token Issuing


    If the user authorizes your app, Friends+Me will redirect back to your
    specified `redirect_uri` with a temporary `code` in a code GET parameter, as
    well as a `state` parameter if you provided one in the previous step. If the
    states don't match, the request may have been created by a third party and
    you should abort the process.


    **Authorization codes may only be exchanged once.**


    **Warning** new refresh token will be issued with access token if used
    refresh token is granted `offline` scope. Don't forget to store the new
    refresh token!


    If all is well, exchange the authorization code for an access token using
    the oauth.access API function.


    `https://api.friendsplus.me/oauth.access`


    + Parameters
        + `client_id`: CLIENT_ID (string) - Your application's Client ID.
        + `client_secret`: CLIENT_SECRET (string) - Your application's Client Secret.
        + `code`: AUTHORIZATION_CODE (string) - The Authorization Code received from the initial /oauth.authorize call.
        + `redirect_uri`: https://myapp.com/callback (string) - This is required only if it was set at the GET /oauth.authorize endpoint. The values must match.

    You'll receive a JSON response containing an `access_token` and
    `refresh_token` (among other details):


    ```

    {
        "ok": true,
        "access_token": "eyJ...MoQ",
        "refresh_token":"GEbRxBN...edjnXbL",
        "expires_in": 86400,
        "token_type": "Bearer"
    }

    ```


    You can then use this token to call API functions on behalf of the user. The
    token will continue functioning until the installing user either revokes the
    token and/or uninstalls your application.


    ### Step 2a - Denied Requests


    If the user denies your request, Friends+Me redirects back to your
    `redirect_uri` with an `error` parameter.


    `https://myapp.com/callback?error=access_denied&error_description=User%20did%20not%20authorize%20the%20request`


    Applications should handle this condition appropriately.


    ### Tokens


    Authenticate your API requests by providing a bearer token, which identifies
    a single user.


    Tokens should be passed in all API calls as a parameter called
    `access_token`.


    Default lifetime of access token is 1 hour.


    Refresh tokens never expire and can be revoked using function oauth.revoke
    if necessary.


    **Treat tokens with care.** Never share tokens with other users or
    applications. Do not publish tokens in public code repositories.


    ### Scopes


    | Scope                 | Short Description |

    |-----------------------|-------------------|

    | `admin`               | Administer your user account

    | `drafts`              | Access and modify your drafts

    | `drafts.read`         | Access information about your drafts

    | `drafts.write`        | Create and modify your drafts

    | `identity`            | Confirm your identity, email and avatar

    | `identity.basic`      | Confirm your identity

    | `identity.email`      | View your email address

    | `identity.avatar`     | View your Friends+Me avatar

    | `users.read`          | Access your team’s profile information

    | `users.read.email`    | View email addresses of people on your team

    | `users.write`         | Modify your profile information

    | `teams`               | Access and modify your teams

    | `teams.read`          | Access information about your teams

    | `teams.write`         | Modify your teams

    | `posts`               | Access, modify and schedule your posts

    | `posts.read`          | Access information about your posts

    | `posts.write`         | Modify your posts

    | `posts.schedule`      | Schedule posts to a queue

    | `queues`              | Access and modify your queues

    | `queues.history`      | Access historic content in your queue

    | `queues.read`         | Access information about your queues

    | `queues.write`        | Modify your queues
  license:
    name: MIT
    url: http://github.com/gruntjs/grunt/blob/master/LICENSE-MIT
host: api.friendsplus.me
basePath: /
securityDefinitions:
  auth:
    type: oauth2
    flow: implicit
    authorizationUrl: https://api.friendsplus.me/
    scopes: {}
    x-skip-client-authentication: false
schemes:
- https
consumes:
- application/json
produces:
- application/json
paths:
  /oauth.authorize:
    get:
      description: >-
        The authorization code grant should be very familiar if you’ve ever signed into a web app using your Facebook or Google account.

        To get a refresh token, you must include the `offline` scope when you initiate an authentication request through the authorize endpoint.

        The client will redirect the user to the authorization server, user will be asked to login to the authorization server and approve the client.

        If the user approves the client they will be redirected from the authorization server to the client’s redirect URI with the following parameters in the query string:

        * **code** with the authorization code

        * **state** with the state parameter sent in the original request. You should compare this value with the value stored in the user’s session to ensure the authorization code obtained is in response to requests made by this client rather than another client application.
      summary: oauth.authorize
      tags:
      - oauth
      operationId: OauthAuthorizeGet
      produces:
      - application/json
      parameters:
      - name: client_id
        in: query
        required: true
        type: string
        description: Your application's Client ID.
      - name: response_type
        in: query
        required: true
        type: string
        description: Indicates to Friends+Me which OAuth 2.0 flow you want to perform. Use **code** for Authorization Code Grant Flow.
      - name: redirect_uri
        in: query
        required: true
        type: string
        description: The URL to which Friends+Me will redirect the browser after authorization has been granted by the user.
      - name: scope
        in: query
        required: false
        type: string
        description: The scopes which you want to request authorization for. These must be separated by a space. You can request any scopes supported by the Friends+Me API (for example, read, write, ...). Include **offline** to get a refresh token.
      - name: state
        in: query
        required: false
        type: string
        description: An opaque value the clients adds to the initial request that Friends+Me includes when redirecting the back to the client. This value must be used by the client to prevent CSRF attacks.
      - name: prompt
        in: query
        required: false
        type: string
        description: >-
          prompt control.

          + **prompt=consent** will force users to provide consent, even if they have an existing user grant for that client and requested scopes.

          + **prompt=none** is a workaround to improve user experience. This will not display the login dialog or the consent dialog. In addition to that if you call /oauth.authorize from a hidden iframe and extract the new access token from the parent frame, then the user will not see the redirects happening.
      responses:
        200:
          description: ''
      security:
      - auth: []
      x-unitTests:
      - request:
          method: GET
          uri: /oauth.authorize?client_id=CLIENT_ID&scope=admin offline&response_type=code&redirect_uri=https://myapp.com/callback&state=RANDOM_STATE
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: oauth.authorize1
        x-testDescription: >-
          The authorization code grant should be very familiar if you’ve ever signed into a web app using your Facebook or Google account.

          To get a refresh token, you must include the `offline` scope when you initiate an authentication request through the authorize endpoint.

          The client will redirect the user to the authorization server, user will be asked to login to the authorization server and approve the client.

          If the user approves the client they will be redirected from the authorization server to the client’s redirect URI with the following parameters in the query string:

          * **code** with the authorization code

          * **state** with the state parameter sent in the original request. You should compare this value with the value stored in the user’s session to ensure the authorization code obtained is in response to requests made by this client rather than another client application.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /oauth.deauthorize:
    get:
      description: >-
        Deauthorize your client for the user, revoke the client.

        ### Errors

        This table lists the expected errors that this function could return. However, other errors can be returned in the case where the service is down or other unexpected factors affect processing. Callers should always check the value of the `ok` property in the response.

        | Error              | Description |

        |--------------------|-------------|

        | `not_authed`       | No authentication token provided.

        | `invalid_auth`     | Invalid authentication token.

        | `internal_error`   | Internal error.
      summary: oauth.deauthorize
      tags:
      - oauth
      operationId: OauthDeauthorizeGet
      produces:
      - application/json
      parameters:
      - name: access_token
        in: query
        required: true
        type: string
        description: Authentication token.
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/DeauthorizeResponse'
          examples:
            application/json:
              ok: true
              deauthorized: true
      security:
      - auth: []
      x-unitTests:
      - request:
          method: GET
          uri: /oauth.deauthorize?access_token=ACCESS_TOKEN
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: '{    "ok": true,    "deauthorized": true}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: oauth.deauthorize1
        x-testDescription: >-
          Deauthorize your client for the user, revoke the client.

          ### Errors

          This table lists the expected errors that this function could return. However, other errors can be returned in the case where the service is down or other unexpected factors affect processing. Callers should always check the value of the `ok` property in the response.

          | Error              | Description |

          |--------------------|-------------|

          | `not_authed`       | No authentication token provided.

          | `invalid_auth`     | Invalid authentication token.

          | `internal_error`   | Internal error.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /oauth.access:
    get:
      description: >-
        **Authorization Code Grant Flow** This is the OAuth 2.0 grant that regular web apps utilize in order to access an API. Use this endpoint to exchange an Authorization Code for access and refresh tokens.

        ### Errors

        This table lists the expected errors that this function could return. However, other errors can be returned in the case where the service is down or other unexpected factors affect processing. Callers should always check the value of the `ok` property in the response.

        | Error              | Description |

        |--------------------|-------------|

        | `user_inactive`    | Authentication token is for a deleted user.

        | `user_not_found`   | Authentication token user not found.

        | `internal_error`   | Internal error.
      summary: oauth.access
      tags:
      - oauth
      operationId: OauthAccessGet
      produces:
      - application/json
      parameters:
      - name: client_id
        in: query
        required: true
        type: string
        description: Your application's Client ID.
      - name: client_secret
        in: query
        required: true
        type: string
        description: Your application's Client Secret.
      - name: code
        in: query
        required: true
        type: string
        description: The Authorization Code received from the initial /oauth.authorize call.
      - name: redirect_uri
        in: query
        required: true
        type: string
        description: This is required only if it was set at the GET /oauth.authorize endpoint. The values must match.
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/AuthorizationCodeGrantResponse'
          examples:
            application/json:
              ok: true
              access_token: eyJ...MoQ
              refresh_token: GEbRxBN...edjnXbL
              expires_in: 86400
              token_type: Bearer
      security:
      - auth: []
      x-unitTests:
      - request:
          method: GET
          uri: /oauth.access?client_id=CLIENT_ID&client_secret=CLIENT_SECRET&code=AUTHORIZATION_CODE&redirect_uri=https://myapp.com/callback
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: '{    "ok": true,    "access_token": "eyJ...MoQ",    "refresh_token":"GEbRxBN...edjnXbL",    "expires_in": 86400,    "token_type": "Bearer"}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: oauth.access1
        x-testDescription: >-
          **Authorization Code Grant Flow** This is the OAuth 2.0 grant that regular web apps utilize in order to access an API. Use this endpoint to exchange an Authorization Code for access and refresh tokens.

          ### Errors

          This table lists the expected errors that this function could return. However, other errors can be returned in the case where the service is down or other unexpected factors affect processing. Callers should always check the value of the `ok` property in the response.

          | Error              | Description |

          |--------------------|-------------|

          | `user_inactive`    | Authentication token is for a deleted user.

          | `user_not_found`   | Authentication token user not found.

          | `internal_error`   | Internal error.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /oauth.token:
    get:
      description: >-
        **Refresh Token Grant** Use this endpoint to refresh an access token, using the refresh token you got during authorization.

        **New refresh token will be issued** in case used `refresh_token` is granted `offline` scope.

        ### Errors

        This table lists the expected errors that this function could return. However, other errors can be returned in the case where the service is down or other unexpected factors affect processing. Callers should always check the value of the `ok` property in the response.

        | Error              | Description |

        |--------------------|-------------|

        | `internal_error`   | Internal error.
      summary: oauth.token
      tags:
      - oauth
      operationId: OauthTokenGet
      produces:
      - application/json
      parameters:
      - name: client_id
        in: query
        required: true
        type: string
        description: Your application's Client ID.
      - name: client_secret
        in: query
        required: true
        type: string
        description: Your application's Client Secret.
      - name: refresh_token
        in: query
        required: true
        type: string
        description: The refresh token to use.
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/RefreshTokenGrantResponse'
          examples:
            application/json:
              ok: true
              access_token: eyJ...MoQ
              expires_in: 86400
              refresh_token: GEbRxBN...edjnXbL
              scope: admin offline
              token_type: Bearer
      security:
      - auth: []
      x-unitTests:
      - request:
          method: GET
          uri: /oauth.token?client_id=CLIENT_ID&client_secret=CLIENT_SECRET&refresh_token=REFRESH_TOKEN
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: '{    "ok": true,    "access_token": "eyJ...MoQ",    "expires_in": 86400,    "refresh_token":"GEbRxBN...edjnXbL",    "scope": "admin offline",    "token_type": "Bearer"}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: oauth.token1
        x-testDescription: >-
          **Refresh Token Grant** Use this endpoint to refresh an access token, using the refresh token you got during authorization.

          **New refresh token will be issued** in case used `refresh_token` is granted `offline` scope.

          ### Errors

          This table lists the expected errors that this function could return. However, other errors can be returned in the case where the service is down or other unexpected factors affect processing. Callers should always check the value of the `ok` property in the response.

          | Error              | Description |

          |--------------------|-------------|

          | `internal_error`   | Internal error.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /oauth.revoke:
    get:
      description: >-
        Since refresh tokens never expire, you need to have a way to invalidate them in case they are compromised or you no longer need them. You can do use using this function.

        ### Errors

        This table lists the expected errors that this function could return. However, other errors can be returned in the case where the service is down or other unexpected factors affect processing. Callers should always check the value of the `ok` property in the response.

        | Error              | Description |

        |--------------------|-------------|

        | `internal_error`   | Internal error.
      summary: oauth.revoke
      tags:
      - oauth
      operationId: OauthRevokeGet
      produces:
      - application/json
      parameters:
      - name: client_id
        in: query
        required: true
        type: string
        description: Your application's Client ID.
      - name: client_secret
        in: query
        required: true
        type: string
        description: Your application's Client Secret.
      - name: refresh_token
        in: query
        required: true
        type: string
        description: The refresh token you want to revoke.
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/RefreshTokenRevokeResponse'
          examples:
            application/json:
              ok: true
              revoked: true
      security:
      - auth: []
      x-unitTests:
      - request:
          method: GET
          uri: /oauth.revoke?client_id=CLIENT_ID&client_secret=CLIENT_SECRET&refresh_token=REFRESH_TOKEN
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: '{    "ok": true,    "revoked": true}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: oauth.revoke1
        x-testDescription: >-
          Since refresh tokens never expire, you need to have a way to invalidate them in case they are compromised or you no longer need them. You can do use using this function.

          ### Errors

          This table lists the expected errors that this function could return. However, other errors can be returned in the case where the service is down or other unexpected factors affect processing. Callers should always check the value of the `ok` property in the response.

          | Error              | Description |

          |--------------------|-------------|

          | `internal_error`   | Internal error.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /api.test:
    get:
      description: >-
        This function helps you test your calling code.

        ### Response

        The response includes any supplied arguments:

        ```

        {
            "ok": true,
            "args": {
                "foo": "bar"
            }
        }

        ```

        If called with an `error` argument an error response is returned:

        ```

        {
            "ok": false,
            "error": "my_error",
            "args": {
                "error": "my_error"
            }
        }

        ```
      summary: api.test
      tags:
      - api
      operationId: ApiTestGet
      produces:
      - application/json
      parameters:
      - name: error
        in: query
        required: false
        type: string
        description: Error response to return
      - name: foo
        in: query
        required: false
        type: string
        description: Example property to return
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/Response'
          examples:
            application/json:
              ok: false
              error: my_error
              args:
                foo: bar
                error: my_error
      security:
      - auth: []
      x-unitTests:
      - request:
          method: GET
          uri: /api.test?error=my_error&foo=bar
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: '{    "ok": false,    "error": "my_error",    "args": {        "foo": "bar",        "error": "my_error"    }}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: api.test1
        x-testDescription: >-
          This function helps you test your calling code.

          ### Response

          The response includes any supplied arguments:

          ```

          {
              "ok": true,
              "args": {
                  "foo": "bar"
              }
          }

          ```

          If called with an `error` argument an error response is returned:

          ```

          {
              "ok": false,
              "error": "my_error",
              "args": {
                  "error": "my_error"
              }
          }

          ```
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /users.identity:
    get:
      description: >-
        Get a user's identity.

        After your Friends+Me app is awarded an identity token through Sign in with Friends+Me, use this function to retrieve a user's identity.

        The returned fields depend on any additional authorization scopes you've requested, `identity.avatar` and `identity.email`.

        This function may only be used by tokens with the `identity.basic` scope, as provided in the Sign in with Friends+Me process.

        ### Expected scopes

        `identity.basic`

        ### Optional scopes

        `identity` `identity.email` `identity.avatar`

        ### Response

        You will receive at a minimum the following information:

        ```

        {
            "ok": true,
            "user": {
                "user_id": "53ed091db33c30ef172172ed",
                "name": "Alois Bělaška"
            }
        }

        ```

        ### Authorization scopes

        In addition, you can request access to additional profile fields by adding the following authorization scopes to your OAuth request:

        `identity.email` provides the team member's email address, if available:

        ```

        {
            "ok": true,
            "user": {
                "user_id": "53ed091db33c30ef172172ed",
                "name": "Alois Bělaška",
                "email": "alois@domain.com"
            }
        }

        ```

        `identity.avatar` yield the team member's avatar images.

        ```

        {
            "ok": true,
            "user": {
                "user_id": "53ed091db33c30ef172172ed",
                "name": "Alois Bělaška",
                "avatar": "https://lh3.googleusercontent.com/-TBgNki-dgJs/AAAAAAAAAAI/AAAAAAADVq8/G8RPk8VD2ak/s50/photo.jpg"
            }
        }

        ```

        ### Errors

        This table lists the expected errors that this function could return. However, other errors can be returned in the case where the service is down or other unexpected factors affect processing. Callers should always check the value of the `ok` property in the response.

        | Error              | Description |

        |--------------------|-------------|

        | `user_inactive`    | Authentication token is for a deleted user.

        | `user_not_found`   | Authentication token user not found.

        | `not_authed`       | No authentication token provided.

        | `invalid_auth`     | Invalid authentication token.

        | `missing_arg`      | The function was not passed all required argument(s).

        | `internal_error`   | Internal error.
      summary: users.identity
      tags:
      - users
      operationId: UsersIdentityGet
      produces:
      - application/json
      parameters:
      - name: access_token
        in: query
        required: true
        type: string
        description: Authentication token. **Requires scope:** `identity.basic`
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/UserIdentityResponse'
          examples:
            application/json:
              ok: true
              user:
                user_id: 53ed091db33c30ef172172ed
                name: Alois Bělaška
      security:
      - auth: []
      x-unitTests:
      - request:
          method: GET
          uri: /users.identity?access_token=ACCESS_TOKEN
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: '{    "ok": true,    "user": {        "user_id": "53ed091db33c30ef172172ed",        "name": "Alois Bělaška"    }}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: users.identity1
        x-testDescription: >-
          Get a user's identity.

          After your Friends+Me app is awarded an identity token through Sign in with Friends+Me, use this function to retrieve a user's identity.

          The returned fields depend on any additional authorization scopes you've requested, `identity.avatar` and `identity.email`.

          This function may only be used by tokens with the `identity.basic` scope, as provided in the Sign in with Friends+Me process.

          ### Expected scopes

          `identity.basic`

          ### Optional scopes

          `identity` `identity.email` `identity.avatar`

          ### Response

          You will receive at a minimum the following information:

          ```

          {
              "ok": true,
              "user": {
                  "user_id": "53ed091db33c30ef172172ed",
                  "name": "Alois Bělaška"
              }
          }

          ```

          ### Authorization scopes

          In addition, you can request access to additional profile fields by adding the following authorization scopes to your OAuth request:

          `identity.email` provides the team member's email address, if available:

          ```

          {
              "ok": true,
              "user": {
                  "user_id": "53ed091db33c30ef172172ed",
                  "name": "Alois Bělaška",
                  "email": "alois@domain.com"
              }
          }

          ```

          `identity.avatar` yield the team member's avatar images.

          ```

          {
              "ok": true,
              "user": {
                  "user_id": "53ed091db33c30ef172172ed",
                  "name": "Alois Bělaška",
                  "avatar": "https://lh3.googleusercontent.com/-TBgNki-dgJs/AAAAAAAAAAI/AAAAAAADVq8/G8RPk8VD2ak/s50/photo.jpg"
              }
          }

          ```

          ### Errors

          This table lists the expected errors that this function could return. However, other errors can be returned in the case where the service is down or other unexpected factors affect processing. Callers should always check the value of the `ok` property in the response.

          | Error              | Description |

          |--------------------|-------------|

          | `user_inactive`    | Authentication token is for a deleted user.

          | `user_not_found`   | Authentication token user not found.

          | `not_authed`       | No authentication token provided.

          | `invalid_auth`     | Invalid authentication token.

          | `missing_arg`      | The function was not passed all required argument(s).

          | `internal_error`   | Internal error.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /users.info:
    get:
      description: >-
        Gets information about a user / team member.

        ### Expected scopes

        `users.read`

        ### Optional scopes

        `users.read.email`

        ### Response

        You will receive at a minimum the following information:

        ```

        {
            "ok": true,
            "user": {
                "user_id": "53ed091db33c30ef172172ed",
                "created": 1502951493,
                "name": "Alois Bělaška",
                "avatar": "https://lh3.googleusercontent.com/-TBgNki-dgJs/AAAAAAAAAAI/AAAAAAADVq8/G8RPk8VD2ak/s50/photo.jpg"
            }
        }

        ```

        ### Authorization scopes

        In addition, you can request access to additional profile fields by adding the following authorization scopes to your OAuth request:

        `users.read.email` provides the team member's email address, if available:

        ```

        {
            "ok": true,
            "user": {
                "user_id": "53ed091db33c30ef172172ed",
                "created": 1502951493,
                "name": "Alois Bělaška",
                "email": "alois@domain.com",
                "avatar": "https://lh3.googleusercontent.com/-TBgNki-dgJs/AAAAAAAAAAI/AAAAAAADVq8/G8RPk8VD2ak/s50/photo.jpg"
            }
        }

        ```

        ### Errors

        This table lists the expected errors that this function could return. However, other errors can be returned in the case where the service is down or other unexpected factors affect processing. Callers should always check the value of the `ok` property in the response.

        | Error              | Description |

        |--------------------|-------------|

        | `access_denied`    | Access denied.

        | `user_inactive`    | Authentication token is for a deleted user.

        | `user_not_found`   | Value passed for `user` was invalid.

        | `not_authed`       | No authentication token provided.

        | `invalid_auth`     | Invalid authentication token.

        | `missing_arg`      | The function was not passed all required argument(s).

        | `internal_error`   | Internal error.
      summary: users.info
      tags:
      - users
      operationId: UsersInfoGet
      produces:
      - application/json
      parameters:
      - name: access_token
        in: query
        required: true
        type: string
        description: Authentication token. **Requires scope:** `users.read`
      - name: user
        in: query
        required: true
        type: string
        description: User to get info on
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/UserInfoResponse'
          examples:
            application/json:
              ok: true
              user:
                user_id: 53ed091db33c30ef172172ed
                created: 1502951493
                name: Alois Bělaška
                email: alois@domain.com
                avatar: https://lh3.googleusercontent.com/-TBgNki-dgJs/AAAAAAAAAAI/AAAAAAADVq8/G8RPk8VD2ak/s50/photo.jpg
      security:
      - auth: []
      x-unitTests:
      - request:
          method: GET
          uri: /users.info?access_token=ACCESS_TOKEN&user=53ed091db33c30ef172172ed
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: '{    "ok": true,    "user": {        "user_id": "53ed091db33c30ef172172ed",        "created": 1502951493,        "name": "Alois Bělaška",        "email": "alois@domain.com",        "avatar": "https://lh3.googleusercontent.com/-TBgNki-dgJs/AAAAAAAAAAI/AAAAAAADVq8/G8RPk8VD2ak/s50/photo.jpg"    }}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: users.info1
        x-testDescription: >-
          Gets information about a user / team member.

          ### Expected scopes

          `users.read`

          ### Optional scopes

          `users.read.email`

          ### Response

          You will receive at a minimum the following information:

          ```

          {
              "ok": true,
              "user": {
                  "user_id": "53ed091db33c30ef172172ed",
                  "created": 1502951493,
                  "name": "Alois Bělaška",
                  "avatar": "https://lh3.googleusercontent.com/-TBgNki-dgJs/AAAAAAAAAAI/AAAAAAADVq8/G8RPk8VD2ak/s50/photo.jpg"
              }
          }

          ```

          ### Authorization scopes

          In addition, you can request access to additional profile fields by adding the following authorization scopes to your OAuth request:

          `users.read.email` provides the team member's email address, if available:

          ```

          {
              "ok": true,
              "user": {
                  "user_id": "53ed091db33c30ef172172ed",
                  "created": 1502951493,
                  "name": "Alois Bělaška",
                  "email": "alois@domain.com",
                  "avatar": "https://lh3.googleusercontent.com/-TBgNki-dgJs/AAAAAAAAAAI/AAAAAAADVq8/G8RPk8VD2ak/s50/photo.jpg"
              }
          }

          ```

          ### Errors

          This table lists the expected errors that this function could return. However, other errors can be returned in the case where the service is down or other unexpected factors affect processing. Callers should always check the value of the `ok` property in the response.

          | Error              | Description |

          |--------------------|-------------|

          | `access_denied`    | Access denied.

          | `user_inactive`    | Authentication token is for a deleted user.

          | `user_not_found`   | Value passed for `user` was invalid.

          | `not_authed`       | No authentication token provided.

          | `invalid_auth`     | Invalid authentication token.

          | `missing_arg`      | The function was not passed all required argument(s).

          | `internal_error`   | Internal error.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /teams.list:
    get:
      description: >-
        Lists teams and queues that the calling user has access to.

        ### Expected scopes

        `teams.read`

        ### Optional scopes

        `teams`

        ### Errors

        This table lists the expected errors that this function could return. However, other errors can be returned in the case where the service is down or other unexpected factors affect processing. Callers should always check the value of the `ok` property in the response.

        | Error              | Description |

        |--------------------|-------------|

        | `user_inactive`    | Authentication token is for a deleted user.

        | `user_not_found`   | Authentication token user not found.

        | `not_authed`       | No authentication token provided.

        | `invalid_auth`     | Invalid authentication token.

        | `missing_arg`      | The function was not passed all required argument(s).

        | `internal_error`   | Internal error.
      summary: teams.list
      tags:
      - teams
      operationId: TeamsListGet
      produces:
      - application/json
      parameters:
      - name: access_token
        in: query
        required: true
        type: string
        description: Authentication token. **Requires scope:** `teams.read`
      - name: exclude_members
        in: query
        required: false
        type: boolean
        description: Exclude the `members` from each `team`
      - name: exclude_queues
        in: query
        required: false
        type: boolean
        description: Exclude the `queues` from each `team`
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/TeamsResponse'
          examples:
            application/json:
              ok: true
              teams:
              - team_id: 539c5b8bfb1d60bf42125524
                created: 1502951493
                name: Social Team
                members:
                - user_id: 53ed091db33c30ef172172ed
                  name: Alois Bělaška
                  role: owner
                  avatar: https://lh3.googleusercontent.com/-TBgNki-dgJs/AAAAAAAAAAI/AAAAAAADVq8/G8RPk8VD2ak/s50/photo.jpg
                - user_id: 53ed091db33c30ef172172ee
                  name: John Doe
                  role: tmanager
                  avatar: https://lh3.googleusercontent.com/image/-n-0L5nvI570/AAAAAAAAAAI/AAAAAAAAAAA/V0sHAqXP4pk/s50/photo.jpg
                queues:
                - queue_id: 53ed091db33c30ef172172ef
                  created: 1502951493
                  created_by:
                    user_id: 53ed091db33c30ef172172ed
                    name: Alois Bělaška
                    avatar: https://lh3.googleusercontent.com/-TBgNki-dgJs/AAAAAAAAAAI/AAAAAAADVq8/G8RPk8VD2ak/s50/photo.jpg
                  name: Friends+Me
                  state: enabled
                  picture: https://lh3.googleusercontent.com/-dHBGGCq7AD4/AAAAAAAAAAI/AAAAAAAACps/jezO8o02B4Y/photo.jpg?sz=50
                  service:
                    type: google
                    category: page
                    id: 105750980959577516811
                    url: https://plus.google.com/+FriendsPlusMe
                  scheduling:
                    timezone: Europe/Prague
                    schedules:
                    - days:
                      - mon
                      - tue
                      times:
                      - 10:35
                      - 12:45
                      - 20:30
                  size: 28
                - queue_id: 53ed091db33c30ef172172f0
                  created: 1502951573
                  created_by:
                    user_id: 53ed091db33c30ef172172ed
                    name: Alois Bělaška
                    avatar: https://lh3.googleusercontent.com/-TBgNki-dgJs/AAAAAAAAAAI/AAAAAAADVq8/G8RPk8VD2ak/s50/photo.jpg
                  name: Friends+Me
                  state: enabled
                  picture: https://graph.facebook.com/207434606051711/picture?type=small
                  service:
                    type: facebook
                    category: page
                    id: 207434606051711
                    url: https://www.facebook.com/207434606051711
                  scheduling:
                    timezone: Europe/Prague
                    schedules:
                    - days:
                      - mon
                      - tue
                      times:
                      - 10:35
                      - 12:45
                      - 20:30
                  size: 8
      security:
      - auth: []
      x-unitTests:
      - request:
          method: GET
          uri: /teams.list?access_token=ACCESS_TOKEN&exclude_members=false&exclude_queues=false
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: '{    "ok": true,    "teams": [        {            "team_id": "539c5b8bfb1d60bf42125524",            "created": 1502951493,            "name": "Social Team",            "members": [                {                    "user_id": "53ed091db33c30ef172172ed",                    "name": "Alois Bělaška",                    "role": "owner",                    "avatar": "https://lh3.googleusercontent.com/-TBgNki-dgJs/AAAAAAAAAAI/AAAAAAADVq8/G8RPk8VD2ak/s50/photo.jpg"                },                {                    "user_id": "53ed091db33c30ef172172ee",                    "name": "John Doe",                    "role": "tmanager",                    "avatar": "https://lh3.googleusercontent.com/image/-n-0L5nvI570/AAAAAAAAAAI/AAAAAAAAAAA/V0sHAqXP4pk/s50/photo.jpg"                }            ],            "queues": [                {                    "queue_id": "53ed091db33c30ef172172ef",                    "created": 1502951493,                    "created_by": {                        "user_id": "53ed091db33c30ef172172ed",                        "name": "Alois Bělaška",                        "avatar": "https://lh3.googleusercontent.com/-TBgNki-dgJs/AAAAAAAAAAI/AAAAAAADVq8/G8RPk8VD2ak/s50/photo.jpg"                    },                    "name": "Friends+Me",                    "state": "enabled",                    "picture": "https://lh3.googleusercontent.com/-dHBGGCq7AD4/AAAAAAAAAAI/AAAAAAAACps/jezO8o02B4Y/photo.jpg?sz=50",                    "service": {                        "type": "google",                        "category": "page",                        "id": "105750980959577516811",                        "url": "https://plus.google.com/+FriendsPlusMe"                    },                    "scheduling": {                        "timezone": "Europe/Prague",                        "schedules": [                            {                                "days": ["mon", "tue"],                                "times": ["10:35", "12:45", "20:30"]                            }                        ]                    },                    "size": 28                },                {                    "queue_id": "53ed091db33c30ef172172f0",                    "created": 1502951573,                    "created_by": {                        "user_id": "53ed091db33c30ef172172ed",                        "name": "Alois Bělaška",                        "avatar": "https://lh3.googleusercontent.com/-TBgNki-dgJs/AAAAAAAAAAI/AAAAAAADVq8/G8RPk8VD2ak/s50/photo.jpg"                    },                    "name": "Friends+Me",                    "state": "enabled",                    "picture": "https://graph.facebook.com/207434606051711/picture?type=small",                    "service": {                        "type": "facebook",                        "category": "page",                        "id": "207434606051711",                        "url": "https://www.facebook.com/207434606051711"                    },                    "scheduling": {                        "timezone": "Europe/Prague",                        "schedules": [                            {                                "days": ["mon", "tue"],                                "times": ["10:35", "12:45", "20:30"]                            }                        ]                    },                    "size": 8                }            ]        }    ]}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: teams.list1
        x-testDescription: >-
          Lists teams and queues that the calling user has access to.

          ### Expected scopes

          `teams.read`

          ### Optional scopes

          `teams`

          ### Errors

          This table lists the expected errors that this function could return. However, other errors can be returned in the case where the service is down or other unexpected factors affect processing. Callers should always check the value of the `ok` property in the response.

          | Error              | Description |

          |--------------------|-------------|

          | `user_inactive`    | Authentication token is for a deleted user.

          | `user_not_found`   | Authentication token user not found.

          | `not_authed`       | No authentication token provided.

          | `invalid_auth`     | Invalid authentication token.

          | `missing_arg`      | The function was not passed all required argument(s).

          | `internal_error`   | Internal error.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /teams.info:
    get:
      description: >-
        Gets information about a team.

        ### Expected scopes

        `teams.read`

        ### Optional scopes

        `teams`

        ### Errors

        This table lists the expected errors that this function could return. However, other errors can be returned in the case where the service is down or other unexpected factors affect processing. Callers should always check the value of the `ok` property in the response.

        | Error              | Description |

        |--------------------|-------------|

        | `access_denied`    | Access denied.

        | `user_not_found`   | Authentication token user not found.

        | `team_not_found`   | Requested team not found.

        | `user_inactive`    | Authentication token is for a deleted user.

        | `not_authed`       | No authentication token provided.

        | `invalid_auth`     | Invalid authentication token.

        | `missing_arg`      | The function was not passed all required argument(s).

        | `internal_error`   | Internal error.
      summary: teams.info
      tags:
      - teams
      operationId: TeamsInfoGet
      produces:
      - application/json
      parameters:
      - name: access_token
        in: query
        required: true
        type: string
        description: Authentication token. **Requires scope:** `teams.read`
      - name: team
        in: query
        required: true
        type: string
        description: Team to get info on
      - name: exclude_members
        in: query
        required: false
        type: boolean
        description: Exclude the `members` from the `team`
      - name: exclude_queues
        in: query
        required: false
        type: boolean
        description: Exclude the `queues` from the `team`
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/TeamResponse'
          examples:
            application/json:
              ok: true
              team:
                team_id: 539c5b8bfb1d60bf42125524
                created: 1502951493
                name: Social Team
                members:
                - user_id: 53ed091db33c30ef172172ed
                  name: Alois Bělaška
                  role: owner
                  avatar: https://lh3.googleusercontent.com/-TBgNki-dgJs/AAAAAAAAAAI/AAAAAAADVq8/G8RPk8VD2ak/s50/photo.jpg
                - user_id: 53ed091db33c30ef172172ee
                  name: John Doe
                  role: tmanager
                  avatar: https://lh3.googleusercontent.com/image/-n-0L5nvI570/AAAAAAAAAAI/AAAAAAAAAAA/V0sHAqXP4pk/s50/photo.jpg
                queues:
                - queue_id: 53ed091db33c30ef172172ef
                  created: 1502951493
                  created_by:
                    user_id: 53ed091db33c30ef172172ed
                    name: Alois Bělaška
                    avatar: https://lh3.googleusercontent.com/-TBgNki-dgJs/AAAAAAAAAAI/AAAAAAADVq8/G8RPk8VD2ak/s50/photo.jpg
                  name: Friends+Me
                  state: enabled
                  picture: https://lh3.googleusercontent.com/-dHBGGCq7AD4/AAAAAAAAAAI/AAAAAAAACps/jezO8o02B4Y/photo.jpg?sz=50
                  service:
                    type: google
                    category: page
                    id: 105750980959577516811
                    url: https://plus.google.com/+FriendsPlusMe
                  scheduling:
                    timezone: Europe/Prague
                    schedules:
                    - days:
                      - mon
                      - tue
                      times:
                      - 10:35
                      - 12:45
                      - 20:30
                  size: 28
                - queue_id: 53ed091db33c30ef172172f0
                  created: 1502951573
                  created_by:
                    user_id: 53ed091db33c30ef172172ed
                    name: Alois Bělaška
                    avatar: https://lh3.googleusercontent.com/-TBgNki-dgJs/AAAAAAAAAAI/AAAAAAADVq8/G8RPk8VD2ak/s50/photo.jpg
                  name: Friends+Me
                  state: enabled
                  picture: https://graph.facebook.com/207434606051711/picture?type=small
                  service:
                    type: facebook
                    category: page
                    id: 207434606051711
                    url: https://www.facebook.com/207434606051711
                  scheduling:
                    timezone: Europe/Prague
                    schedules:
                    - days:
                      - mon
                      - tue
                      times:
                      - 10:35
                      - 12:45
                      - 20:30
                  size: 8
      security:
      - auth: []
      x-unitTests:
      - request:
          method: GET
          uri: /teams.info?access_token=ACCESS_TOKEN&team=539c5b8bfb1d60bf42125524&exclude_members=false&exclude_queues=false
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: '{    "ok": true,    "team": {        "team_id": "539c5b8bfb1d60bf42125524",        "created": 1502951493,        "name": "Social Team",        "members": [            {                "user_id": "53ed091db33c30ef172172ed",                "name": "Alois Bělaška",                "role": "owner",                "avatar": "https://lh3.googleusercontent.com/-TBgNki-dgJs/AAAAAAAAAAI/AAAAAAADVq8/G8RPk8VD2ak/s50/photo.jpg"            },            {                "user_id": "53ed091db33c30ef172172ee",                "name": "John Doe",                "role": "tmanager",                "avatar": "https://lh3.googleusercontent.com/image/-n-0L5nvI570/AAAAAAAAAAI/AAAAAAAAAAA/V0sHAqXP4pk/s50/photo.jpg"            }        ],        "queues": [            {                "queue_id": "53ed091db33c30ef172172ef",                "created": 1502951493,                "created_by": {                    "user_id": "53ed091db33c30ef172172ed",                    "name": "Alois Bělaška",                    "avatar": "https://lh3.googleusercontent.com/-TBgNki-dgJs/AAAAAAAAAAI/AAAAAAADVq8/G8RPk8VD2ak/s50/photo.jpg"                },                "name": "Friends+Me",                "state": "enabled",                "picture": "https://lh3.googleusercontent.com/-dHBGGCq7AD4/AAAAAAAAAAI/AAAAAAAACps/jezO8o02B4Y/photo.jpg?sz=50",                "service": {                    "type": "google",                    "category": "page",                    "id": "105750980959577516811",                    "url": "https://plus.google.com/+FriendsPlusMe"                },                "scheduling": {                    "timezone": "Europe/Prague",                    "schedules": [                        {                            "days": ["mon", "tue"],                            "times": ["10:35", "12:45", "20:30"]                        }                    ]                },                "size": 28            },            {                "queue_id": "53ed091db33c30ef172172f0",                "created": 1502951573,                "created_by": {                    "user_id": "53ed091db33c30ef172172ed",                    "name": "Alois Bělaška",                    "avatar": "https://lh3.googleusercontent.com/-TBgNki-dgJs/AAAAAAAAAAI/AAAAAAADVq8/G8RPk8VD2ak/s50/photo.jpg"                },                "name": "Friends+Me",                "state": "enabled",                "picture": "https://graph.facebook.com/207434606051711/picture?type=small",                "service": {                    "type": "facebook",                    "category": "page",                    "id": "207434606051711",                    "url": "https://www.facebook.com/207434606051711"                },                "scheduling": {                    "timezone": "Europe/Prague",                    "schedules": [                        {                            "days": ["mon", "tue"],                            "times": ["10:35", "12:45", "20:30"]                        }                    ]                },                "size": 8            }        ]    }}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: teams.info1
        x-testDescription: >-
          Gets information about a team.

          ### Expected scopes

          `teams.read`

          ### Optional scopes

          `teams`

          ### Errors

          This table lists the expected errors that this function could return. However, other errors can be returned in the case where the service is down or other unexpected factors affect processing. Callers should always check the value of the `ok` property in the response.

          | Error              | Description |

          |--------------------|-------------|

          | `access_denied`    | Access denied.

          | `user_not_found`   | Authentication token user not found.

          | `team_not_found`   | Requested team not found.

          | `user_inactive`    | Authentication token is for a deleted user.

          | `not_authed`       | No authentication token provided.

          | `invalid_auth`     | Invalid authentication token.

          | `missing_arg`      | The function was not passed all required argument(s).

          | `internal_error`   | Internal error.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /queues.list:
    get:
      description: >-
        Lists queues that the calling user has access to.

        ### Expected scopes

        `queues.read`

        ### Optional scopes

        `queues`

        ### Errors

        This table lists the expected errors that this function could return. However, other errors can be returned in the case where the service is down or other unexpected factors affect processing. Callers should always check the value of the `ok` property in the response.

        | Error              | Description |

        |--------------------|-------------|

        | `access_denied`    | Access denied.

        | `user_not_found`   | Authentication token user not found.

        | `team_not_found`   | Requested team not found.

        | `user_inactive`    | Authentication token is for a deleted user.

        | `not_authed`       | No authentication token provided.

        | `invalid_auth`     | Invalid authentication token.

        | `missing_arg`      | The function was not passed all required argument(s).

        | `internal_error`   | Internal error.
      summary: queues.list
      tags:
      - queues
      operationId: QueuesListGet
      produces:
      - application/json
      parameters:
      - name: access_token
        in: query
        required: true
        type: string
        description: Authentication token. **Requires scope:** `queues.read`
      - name: team
        in: query
        required: false
        type: string
        description: List this team queues or list all queues available to this user if this parameter is not set.
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/QueuesResponse'
          examples:
            application/json:
              ok: true
              queues:
              - queue_id: 53ed091db33c30ef172172ef
                created: 1502951493
                created_by:
                  user_id: 53ed091db33c30ef172172ed
                  name: Alois Bělaška
                  avatar: https://lh3.googleusercontent.com/-TBgNki-dgJs/AAAAAAAAAAI/AAAAAAADVq8/G8RPk8VD2ak/s50/photo.jpg
                name: Friends+Me
                state: enabled
                picture: https://lh3.googleusercontent.com/-dHBGGCq7AD4/AAAAAAAAAAI/AAAAAAAACps/jezO8o02B4Y/photo.jpg?sz=50
                service:
                  type: google
                  category: page
                  id: 105750980959577516811
                  url: https://plus.google.com/+FriendsPlusMe
                scheduling:
                  timezone: Europe/Prague
                  schedules:
                  - days:
                    - mon
                    - tue
                    times:
                    - 10:35
                    - 12:45
                    - 20:30
                size: 28
              - queue_id: 53ed091db33c30ef172172f0
                created: 1502951573
                created_by:
                  user_id: 53ed091db33c30ef172172ed
                  name: Alois Bělaška
                  avatar: https://lh3.googleusercontent.com/-TBgNki-dgJs/AAAAAAAAAAI/AAAAAAADVq8/G8RPk8VD2ak/s50/photo.jpg
                name: Friends+Me
                state: enabled
                picture: https://graph.facebook.com/207434606051711/picture?type=small
                service:
                  type: facebook
                  category: page
                  id: 207434606051711
                  url: https://www.facebook.com/207434606051711
                scheduling:
                  timezone: Europe/Prague
                  schedules:
                  - days:
                    - mon
                    - tue
                    times:
                    - 10:35
                    - 12:45
                    - 20:30
                size: 8
      security:
      - auth: []
      x-unitTests:
      - request:
          method: GET
          uri: /queues.list?access_token=ACCESS_TOKEN&team=539c5b8bfb1d60bf42125524
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: '{    "ok": true,    "queues": [        {            "queue_id": "53ed091db33c30ef172172ef",            "created": 1502951493,            "created_by": {                "user_id": "53ed091db33c30ef172172ed",                "name": "Alois Bělaška",                "avatar": "https://lh3.googleusercontent.com/-TBgNki-dgJs/AAAAAAAAAAI/AAAAAAADVq8/G8RPk8VD2ak/s50/photo.jpg"            },            "name": "Friends+Me",            "state": "enabled",            "picture": "https://lh3.googleusercontent.com/-dHBGGCq7AD4/AAAAAAAAAAI/AAAAAAAACps/jezO8o02B4Y/photo.jpg?sz=50",            "service": {                "type": "google",                "category": "page",                "id": "105750980959577516811",                "url": "https://plus.google.com/+FriendsPlusMe"            },            "scheduling": {                "timezone": "Europe/Prague",                "schedules": [                    {                        "days": ["mon", "tue"],                        "times": ["10:35", "12:45", "20:30"]                    }                ]            },            "size": 28        },        {            "queue_id": "53ed091db33c30ef172172f0",            "created": 1502951573,            "created_by": {                "user_id": "53ed091db33c30ef172172ed",                "name": "Alois Bělaška",                "avatar": "https://lh3.googleusercontent.com/-TBgNki-dgJs/AAAAAAAAAAI/AAAAAAADVq8/G8RPk8VD2ak/s50/photo.jpg"            },            "name": "Friends+Me",            "state": "enabled",            "picture": "https://graph.facebook.com/207434606051711/picture?type=small",            "service": {                "type": "facebook",                "category": "page",                "id": "207434606051711",                "url": "https://www.facebook.com/207434606051711"            },            "scheduling": {                "timezone": "Europe/Prague",                "schedules": [                    {                        "days": ["mon", "tue"],                        "times": ["10:35", "12:45", "20:30"]                    }                ]            },            "size": 8        }    ]}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: queues.list1
        x-testDescription: >-
          Lists queues that the calling user has access to.

          ### Expected scopes

          `queues.read`

          ### Optional scopes

          `queues`

          ### Errors

          This table lists the expected errors that this function could return. However, other errors can be returned in the case where the service is down or other unexpected factors affect processing. Callers should always check the value of the `ok` property in the response.

          | Error              | Description |

          |--------------------|-------------|

          | `access_denied`    | Access denied.

          | `user_not_found`   | Authentication token user not found.

          | `team_not_found`   | Requested team not found.

          | `user_inactive`    | Authentication token is for a deleted user.

          | `not_authed`       | No authentication token provided.

          | `invalid_auth`     | Invalid authentication token.

          | `missing_arg`      | The function was not passed all required argument(s).

          | `internal_error`   | Internal error.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /queues.info:
    get:
      description: >-
        Gets information about a queue.

        ### Expected scopes

        `queues.read`

        ### Optional scopes

        `queues`

        ### Errors

        This table lists the expected errors that this function could return. However, other errors can be returned in the case where the service is down or other unexpected factors affect processing. Callers should always check the value of the `ok` property in the response.

        | Error              | Description |

        |--------------------|-------------|

        | `access_denied`    | Access denied.

        | `queue_not_found`  | Requested queue not found.

        | `user_not_found`   | Authentication token user not found.

        | `user_inactive`    | Authentication token is for a deleted user.

        | `not_authed`       | No authentication token provided.

        | `invalid_auth`     | Invalid authentication token.

        | `missing_arg`      | The function was not passed all required argument(s).

        | `internal_error`   | Internal error.
      summary: queues.info
      tags:
      - queues
      operationId: QueuesInfoGet
      produces:
      - application/json
      parameters:
      - name: access_token
        in: query
        required: true
        type: string
        description: Authentication token. **Requires scope:** `queues.read`
      - name: queue
        in: query
        required: true
        type: string
        description: Queue to get info on
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/QueueResponse'
          examples:
            application/json:
              ok: true
              queue:
                queue_id: 53ed091db33c30ef172172ef
                created: 1502951493
                created_by:
                  user_id: 53ed091db33c30ef172172ed
                  name: Alois Bělaška
                  avatar: https://lh3.googleusercontent.com/-TBgNki-dgJs/AAAAAAAAAAI/AAAAAAADVq8/G8RPk8VD2ak/s50/photo.jpg
                name: Friends+Me
                state: enabled
                picture: https://lh3.googleusercontent.com/-dHBGGCq7AD4/AAAAAAAAAAI/AAAAAAAACps/jezO8o02B4Y/photo.jpg?sz=50
                service:
                  type: google
                  category: page
                  id: 105750980959577516811
                  url: https://plus.google.com/+FriendsPlusMe
                scheduling:
                  timezone: Europe/Prague
                  schedules:
                  - days:
                    - mon
                    - tue
                    times:
                    - 10:35
                    - 12:45
                    - 20:30
                size: 28
      security:
      - auth: []
      x-unitTests:
      - request:
          method: GET
          uri: /queues.info?access_token=ACCESS_TOKEN&queue=53ed091db33c30ef172172ef
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: '{    "ok": true,    "queue": {        "queue_id": "53ed091db33c30ef172172ef",        "created": 1502951493,        "created_by": {            "user_id": "53ed091db33c30ef172172ed",            "name": "Alois Bělaška",            "avatar": "https://lh3.googleusercontent.com/-TBgNki-dgJs/AAAAAAAAAAI/AAAAAAADVq8/G8RPk8VD2ak/s50/photo.jpg"        },        "name": "Friends+Me",        "state": "enabled",        "picture": "https://lh3.googleusercontent.com/-dHBGGCq7AD4/AAAAAAAAAAI/AAAAAAAACps/jezO8o02B4Y/photo.jpg?sz=50",        "service": {            "type": "google",            "category": "page",            "id": "105750980959577516811",            "url": "https://plus.google.com/+FriendsPlusMe"        },        "scheduling": {            "timezone": "Europe/Prague",            "schedules": [                {                    "days": ["mon", "tue"],                    "times": ["10:35", "12:45", "20:30"]                }            ]        },        "size": 28    }}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: queues.info1
        x-testDescription: >-
          Gets information about a queue.

          ### Expected scopes

          `queues.read`

          ### Optional scopes

          `queues`

          ### Errors

          This table lists the expected errors that this function could return. However, other errors can be returned in the case where the service is down or other unexpected factors affect processing. Callers should always check the value of the `ok` property in the response.

          | Error              | Description |

          |--------------------|-------------|

          | `access_denied`    | Access denied.

          | `queue_not_found`  | Requested queue not found.

          | `user_not_found`   | Authentication token user not found.

          | `user_inactive`    | Authentication token is for a deleted user.

          | `not_authed`       | No authentication token provided.

          | `invalid_auth`     | Invalid authentication token.

          | `missing_arg`      | The function was not passed all required argument(s).

          | `internal_error`   | Internal error.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /queues.updateScheduling:
    post:
      description: >-
        Update a queue scheduling.

        ### Expected scopes

        `queues.write`

        ### Optional scopes

        `queues`

        ### Errors

        This table lists the expected errors that this function could return. However, other errors can be returned in the case where the service is down or other unexpected factors affect processing. Callers should always check the value of the `ok` property in the response.

        | Error              | Description |

        |--------------------|-------------|

        | `access_denied`    | Access denied.

        | `queue_not_found`  | Requested queue not found.

        | `user_not_found`   | Authentication token user not found.

        | `user_inactive`    | Authentication token is for a deleted user.

        | `not_authed`       | No authentication token provided.

        | `invalid_auth`     | Invalid authentication token.

        | `missing_arg`      | The function was not passed all required argument(s).

        | `internal_error`   | Internal error.
      summary: queues.updateScheduling
      tags:
      - queues
      operationId: QueuesUpdateSchedulingPost
      produces:
      - application/json
      parameters:
      - name: access_token
        in: query
        required: true
        type: string
        description: Authentication token. **Requires scope:** `queues.write`
      - name: queue
        in: query
        required: true
        type: string
        description: Queue to update
      - name: body
        in: body
        required: true
        description: ''
        schema:
          $ref: '#/definitions/QueueUpdateSchedulingRequest'
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/QueueResponse'
          examples:
            application/json:
              ok: true
              queue:
                queue_id: 53ed091db33c30ef172172ef
                created: 1502951493
                created_by:
                  user_id: 53ed091db33c30ef172172ed
                  name: Alois Bělaška
                  avatar: https://lh3.googleusercontent.com/-TBgNki-dgJs/AAAAAAAAAAI/AAAAAAADVq8/G8RPk8VD2ak/s50/photo.jpg
                name: Friends+Me
                state: enabled
                picture: https://lh3.googleusercontent.com/-dHBGGCq7AD4/AAAAAAAAAAI/AAAAAAAACps/jezO8o02B4Y/photo.jpg?sz=50
                service:
                  type: google
                  category: page
                  id: 105750980959577516811
                  url: https://plus.google.com/+FriendsPlusMe
                scheduling:
                  timezone: Europe/Berlin
                  schedules:
                  - days:
                    - mon
                    - fri
                    times:
                    - 9:25
                    - 23:30
                size: 28
      security:
      - auth: []
      x-unitTests:
      - request:
          method: POST
          uri: /queues.updateScheduling?access_token=ACCESS_TOKEN&queue=53ed091db33c30ef172172ef
          headers:
            Content-Type: application/json
          body: '{    "timezone": "Europe/Berlin",    "schedules": [        {            "days": ["mon", "tue", "wed", "thu", "fri", "sat", "sun"],            "times": ["9:25", "23:30"]        }    ]}'
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: '{    "ok": true,    "queue": {        "queue_id": "53ed091db33c30ef172172ef",        "created": 1502951493,        "created_by": {            "user_id": "53ed091db33c30ef172172ed",            "name": "Alois Bělaška",            "avatar": "https://lh3.googleusercontent.com/-TBgNki-dgJs/AAAAAAAAAAI/AAAAAAADVq8/G8RPk8VD2ak/s50/photo.jpg"        },        "name": "Friends+Me",        "state": "enabled",        "picture": "https://lh3.googleusercontent.com/-dHBGGCq7AD4/AAAAAAAAAAI/AAAAAAAACps/jezO8o02B4Y/photo.jpg?sz=50",        "service": {            "type": "google",            "category": "page",            "id": "105750980959577516811",            "url": "https://plus.google.com/+FriendsPlusMe"        },        "scheduling": {            "timezone": "Europe/Berlin",            "schedules": [                {                    "days": ["mon", "fri"],                    "times": ["9:25", "23:30"]                }            ]        },        "size": 28    }}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: queues.updateScheduling1
        x-testDescription: >-
          Update a queue scheduling.

          ### Expected scopes

          `queues.write`

          ### Optional scopes

          `queues`

          ### Errors

          This table lists the expected errors that this function could return. However, other errors can be returned in the case where the service is down or other unexpected factors affect processing. Callers should always check the value of the `ok` property in the response.

          | Error              | Description |

          |--------------------|-------------|

          | `access_denied`    | Access denied.

          | `queue_not_found`  | Requested queue not found.

          | `user_not_found`   | Authentication token user not found.

          | `user_inactive`    | Authentication token is for a deleted user.

          | `not_authed`       | No authentication token provided.

          | `invalid_auth`     | Invalid authentication token.

          | `missing_arg`      | The function was not passed all required argument(s).

          | `internal_error`   | Internal error.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /queues.history:
    get:
      description: >-
        Fetches history of published posts from a queue.

        This function returns a portion of posts from the specified queue. To read the entire history for a queue, call the function with no `latest` or `oldest` arguments, and then continue paging using the instructions below.

        `latest` or `oldest` arguments refer to posts completed_at timestamp;

        The `posts` array up to 100 posts between `latest` and `oldest`. If there were more than 100 posts between those two points, then `has_more` will be true.

        If a post has the same `completed_at` as `latest` or `oldest` it will not be included in the list, unless `inclusive` is true. This allows a client to fetch all posts in a hole in queue history, by calling queues.history with `latest` set to the oldest post they have after the hole, and `oldest` to the latest post they have before the hole. If the response includes `has_more` then the client can make another call, using the `completed_at` value of the final posts as the `latest` param to get the next page of posts.

        If there are more than 100 posts between the two timestamps then the posts returned are the ones closest to `latest`. In most cases an application will want the most recent posts and will page backward from there. If `oldest` is provided but not `latest` then the posts returned are those closest to `oldest`, allowing you to page forward through history if desired.

        ### Expected scopes

        `queues.history`

        ### Optional scopes

        `queues`

        ### Errors

        This table lists the expected errors that this function could return. However, other errors can be returned in the case where the service is down or other unexpected factors affect processing. Callers should always check the value of the `ok` property in the response.

        | Error               | Description |

        |---------------------|-------------|

        | `access_denied`     | Access denied.

        | `queue_not_found`   | Requested queue not found.

        | `user_not_found`    | Authentication token user not found.

        | `user_inactive`     | Authentication token is for a deleted user.

        | `invalid_ts_latest` | Value passed for `latest` was invalid

        | `invalid_ts_oldest` | Value passed for `oldest` was invalid

        | `not_authed`        | No authentication token provided.

        | `invalid_auth`      | Invalid authentication token.

        | `missing_arg`       | The function was not passed all required argument(s).

        | `internal_error`    | Internal error.
      summary: queues.history
      tags:
      - queues
      operationId: QueuesHistoryGet
      produces:
      - application/json
      parameters:
      - name: access_token
        in: query
        required: true
        type: string
        description: Authentication token. **Requires scope:** `queues.history`
      - name: queue
        in: query
        required: true
        type: string
        description: List this queue published posts or list all queues available to this user if this parameter is not set.
      - name: count
        in: query
        required: false
        type: number
        format: double
        description: Number of posts to return, between 1 and 1000.
      - name: inclusive
        in: query
        required: false
        type: boolean
        description: Include posts with latest or oldest timestamp in results.
      - name: latest
        in: query
        required: false
        type: number
        format: double
        description: End of time range of posts to include in results.
      - name: oldest
        in: query
        required: false
        type: number
        format: double
        description: Start of time range of posts to include in results.
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/PostsTimelineResponse'
          examples: {}
      security:
      - auth: []
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /posts.list:
    get:
      description: >-
        Fetches list of scheduled posts from a queue or team.

        This function returns a portion of scheduled posts from the specified queue or team. To read the entire list for a queue or a team, call the function with no `latest` or `oldest` arguments, and then continue paging using the instructions below.

        `latest` or `oldest` arguments refer to posts `publish_at` timestamp;

        The `posts` array up to 100 posts between `latest` and `oldest`. If there were more than 100 posts between those two points, then `has_more` will be true.

        If a post has the same `publish_at` as `latest` or `oldest` it will not be included in the list, unless `inclusive` is true. This allows a client to fetch all posts in a hole, by calling posts.list with `latest` set to the oldest post they have after the hole, and `oldest` to the latest post they have before the hole. If the response includes `has_more` then the client can make another call, using the `publish_at` value of the final posts as the `latest` param to get the next page of posts.

        If there are more than 100 posts between the two timestamps then the posts returned are the ones closest to `latest`. In most cases an application will want the most recent posts and will page forward from there. If `oldest` is provided but not `latest` then the posts returned are those closest to `oldest`, allowing you to page forward through the list if desired.

        ### Expected scopes

        `posts.read`

        ### Optional scopes

        `posts`

        ### Errors

        This table lists the expected errors that this function could return. However, other errors can be returned in the case where the service is down or other unexpected factors affect processing. Callers should always check the value of the `ok` property in the response.

        | Error               | Description |

        |---------------------|-------------|

        | `access_denied`     | Access denied.

        | `queue_not_found`   | Requested queue not found.

        | `team_not_found`    | Requested team not found.

        | `user_not_found`    | Authentication token user not found.

        | `user_inactive`     | Authentication token is for a deleted user.

        | `invalid_ts_latest` | Value passed for `latest` was invalid

        | `invalid_ts_oldest` | Value passed for `oldest` was invalid

        | `not_authed`        | No authentication token provided.

        | `invalid_auth`      | Invalid authentication token.

        | `missing_arg`       | The function was not passed all required argument(s).

        | `internal_error`    | Internal error.
      summary: posts.list
      tags:
      - posts
      operationId: PostsListGet
      produces:
      - application/json
      parameters:
      - name: access_token
        in: query
        required: true
        type: string
        description: Authentication token. **Requires scope:** `posts.read`
      - name: queue
        in: query
        required: false
        type: string
        description: List this queue scheduled posts, parameter `team` must be set if `queue` is not present.
      - name: team
        in: query
        required: false
        type: string
        description: List this team scheduled posts, parameter `queue` must be set if `team` is not present.
      - name: count
        in: query
        required: false
        type: number
        format: double
        description: Number of posts to return, between 1 and 1000.
      - name: inclusive
        in: query
        required: false
        type: boolean
        description: Include posts with latest or oldest timestamp in results.
      - name: latest
        in: query
        required: false
        type: number
        format: double
        description: End of time range of posts to include in results.
      - name: oldest
        in: query
        required: false
        type: number
        format: double
        description: Start of time range of posts to include in results.
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/PostsQueueResponse'
          examples: {}
      security:
      - auth: []
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /posts.info:
    get:
      description: >-
        Gets information about a post.

        ### Expected scopes

        `posts.read`

        ### Optional scopes

        `posts`

        ### Errors

        This table lists the expected errors that this function could return. However, other errors can be returned in the case where the service is down or other unexpected factors affect processing. Callers should always check the value of the `ok` property in the response.

        | Error              | Description |

        |--------------------|-------------|

        | `access_denied`    | Access denied.

        | `post_not_found`   | Requested post not found.

        | `user_not_found`   | Authentication token user not found.

        | `user_inactive`    | Authentication token is for a deleted user.

        | `not_authed`       | No authentication token provided.

        | `invalid_auth`     | Invalid authentication token.

        | `missing_arg`      | The function was not passed all required argument(s).

        | `internal_error`   | Internal error.
      summary: posts.info
      tags:
      - posts
      operationId: PostsInfoGet
      produces:
      - application/json
      parameters:
      - name: access_token
        in: query
        required: true
        type: string
        description: Authentication token. **Requires scope:** `posts.read`
      - name: post
        in: query
        required: true
        type: string
        description: Post to get info on
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/PostResponse'
          examples: {}
      security:
      - auth: []
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /posts.preview:
    post:
      description: >-
        Create a post preview.

        Html value of the request `html` property is checked.

        Link, request `link` property, is checked, crawled and link preview is generated, if present within the request.

        Request `pictures` property is checked and pictures crawled if present within the request.

        ### Expected scopes

        `posts.write` `drafts.write`

        ### Optional scopes

        `posts` `drafts`

        ### Errors

        This table lists the expected errors that this function could return. However, other errors can be returned in the case where the service is down or other unexpected factors affect processing. Callers should always check the value of the `ok` property in the response.

        | Error              | Description |

        |--------------------|-------------|

        | `access_denied`    | Access denied.

        | `user_not_found`   | Authentication token user not found.

        | `user_inactive`    | Authentication token is for a deleted user.

        | `not_authed`       | No authentication token provided.

        | `invalid_auth`     | Invalid authentication token.

        | `missing_arg`      | The function was not passed all required argument(s).

        | `internal_error`   | Internal error.
      summary: posts.preview
      tags:
      - posts
      operationId: PostsPreviewPost
      produces:
      - application/json
      parameters:
      - name: access_token
        in: query
        required: true
        type: string
        description: Authentication token. **Requires scope:** `posts.write`
      - name: body
        in: body
        required: true
        description: ''
        schema:
          $ref: '#/definitions/PostCreateRequest'
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/PostPreviewResponse'
          examples:
            application/json:
              ok: true
              post:
                html: <p>Merry Christmas Everyone!</p>
                attachments:
                - type: link
                  description: Publish at the right time, reach more customers and increase engagement. The right cross-promotion, content management and scheduling solution for you. Ramp Up Sales!
                  title: Friends+Me - Share to ANYWHERE. Because sharing is caring.
                  url: https://friendsplus.me
                  picture:
                    content_type: image/jpeg
                    height: 827
                    width: 1280
                    url: https://lh3.googleusercontent.com/S3I41DrddGBWTqwgmrXv0-6b7zzeNBE73e3e_-HsMfK4Sk5NNjvaOQacCJeyUOuGXAfWeqi30Hnu1UgcI32adtIr2Ib8
                  pictures:
                  - content_type: image/jpeg
                    height: 827
                    width: 1280
                    url: https://lh3.googleusercontent.com/S3I41DrddGBWTqwgmrXv0-6b7zzeNBE73e3e_-HsMfK4Sk5NNjvaOQacCJeyUOuGXAfWeqi30Hnu1UgcI32adtIr2Ib8
      security:
      - auth: []
      x-unitTests:
      - request:
          method: POST
          uri: /posts.preview?access_token=ACCESS_TOKEN
          headers:
            Content-Type: application/json
          body: '{    "html": "<p>Merry Christmas Everyone!</p>",    "link": "https://friendsplus.me"}'
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: '{    "ok": true,    "post": {        "html": "<p>Merry Christmas Everyone!</p>",        "attachments": [            {                "type": "link",                "description" : "Publish at the right time, reach more customers and increase engagement. The right cross-promotion, content management and scheduling solution for you. Ramp Up Sales!",                "title" : "Friends+Me - Share to ANYWHERE. Because sharing is caring.",                "url" : "https://friendsplus.me",                "picture": {                    "content_type" : "image/jpeg",                    "height" : 827,                    "width" : 1280,                    "url" : "https://lh3.googleusercontent.com/S3I41DrddGBWTqwgmrXv0-6b7zzeNBE73e3e_-HsMfK4Sk5NNjvaOQacCJeyUOuGXAfWeqi30Hnu1UgcI32adtIr2Ib8"                },                "pictures": [                    {                        "content_type" : "image/jpeg",                        "height" : 827,                        "width" : 1280,                        "url" : "https://lh3.googleusercontent.com/S3I41DrddGBWTqwgmrXv0-6b7zzeNBE73e3e_-HsMfK4Sk5NNjvaOQacCJeyUOuGXAfWeqi30Hnu1UgcI32adtIr2Ib8"                    }                ]            }        ]    }}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: posts.preview1
        x-testDescription: >-
          Create a post preview.

          Html value of the request `html` property is checked.

          Link, request `link` property, is checked, crawled and link preview is generated, if present within the request.

          Request `pictures` property is checked and pictures crawled if present within the request.

          ### Expected scopes

          `posts.write` `drafts.write`

          ### Optional scopes

          `posts` `drafts`

          ### Errors

          This table lists the expected errors that this function could return. However, other errors can be returned in the case where the service is down or other unexpected factors affect processing. Callers should always check the value of the `ok` property in the response.

          | Error              | Description |

          |--------------------|-------------|

          | `access_denied`    | Access denied.

          | `user_not_found`   | Authentication token user not found.

          | `user_inactive`    | Authentication token is for a deleted user.

          | `not_authed`       | No authentication token provided.

          | `invalid_auth`     | Invalid authentication token.

          | `missing_arg`      | The function was not passed all required argument(s).

          | `internal_error`   | Internal error.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /posts.create:
    post:
      description: >-
        Create and schedule a post.

        ### Expected scopes

        `posts.schedule`

        ### Optional scopes

        `posts`

        ### Errors

        This table lists the expected errors that this function could return. However, other errors can be returned in the case where the service is down or other unexpected factors affect processing. Callers should always check the value of the `ok` property in the response.

        | Error              | Description |

        |--------------------|-------------|

        | `access_denied`    | Access denied.

        | `queue_not_found`  | Requested queue not found.

        | `queue_blocked`    | Destination queue of this post is blocked.

        | `queue_size_limit` | Queue size limit reached.

        | `user_not_found`   | Authentication token user not found.

        | `user_inactive`    | Authentication token is for a deleted user.

        | `invalid_request`  | The function was passed invalid request or argument(s).

        | `not_authed`       | No authentication token provided.

        | `invalid_auth`     | Invalid authentication token.

        | `missing_arg`      | The function was not passed all required argument(s).

        | `internal_error`   | Internal error.
      summary: posts.create
      tags:
      - posts
      operationId: PostsCreatePost
      produces:
      - application/json
      parameters:
      - name: access_token
        in: query
        required: true
        type: string
        description: Authentication token. **Requires scope:** `posts.schedule`
      - name: queue
        in: query
        required: true
        type: string
        description: Queue for which should be this post scheduled.
      - name: body
        in: body
        required: true
        description: ''
        schema:
          $ref: '#/definitions/PostCreateRequest'
      - name: schedule
        in: query
        required: false
        enum:
        - at
        - now
        - first
        - last
        type: string
        description: Which type of scheduler should be used. The post can be published `now` or `at` time specified by `publish_at` parameter or added to the queue as a `first` or `last` to be published, meaning to the begin or the end of the queue.
      - name: publish_at
        in: query
        required: false
        type: number
        format: double
        description: When should be the post published (unix timestamp).
      - name: no_channeling
        in: query
        required: false
        type: boolean
        description: Disable post channeling, post will not be cross-promoted to other queues. Used only for scheduling of Google+ posts at the moment.
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/PostCreateResponse'
          examples: {}
      security:
      - auth: []
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /posts.update:
    post:
      description: >-
        Update scheduled or failed posts.

        It is possible to update only posts that are not in `published` state.

        Attached link will be removed if the request property `link` is set to `null` and link will not be updated in any way if the `link` property is not present within the request.

        And the same applies for the `pictures` property, attached pictures will be removed if the request `pictures` property is set to `null` and pictures will not be updated in any way if the `pictures` property is not present within the request.

        ### Expected scopes

        `posts.write`

        ### Optional scopes

        `posts`

        ### Errors

        This table lists the expected errors that this function could return. However, other errors can be returned in the case where the service is down or other unexpected factors affect processing. Callers should always check the value of the `ok` property in the response.

        | Error                | Description |

        |----------------------|-------------|

        | `access_denied`      | Access denied.

        | `invalid_post_state` | Requested post is in invalid state, `published` in this case.

        | `post_not_found`     | Requested post not found.

        | `user_not_found`     | Authentication token user not found.

        | `user_inactive`      | Authentication token is for a deleted user.

        | `not_authed`         | No authentication token provided.

        | `invalid_auth`       | Invalid authentication token.

        | `missing_arg`        | The function was not passed all required argument(s).

        | `internal_error`     | Internal error.
      summary: posts.update
      tags:
      - posts
      operationId: PostsUpdatePost
      produces:
      - application/json
      parameters:
      - name: access_token
        in: query
        required: true
        type: string
        description: Authentication token. **Requires scope:** `posts.write`
      - name: post
        in: query
        required: true
        type: string
        description: Post to update
      - name: body
        in: body
        required: true
        description: ''
        schema:
          $ref: '#/definitions/PostUpdateRequest'
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/PostUpdateResponse'
          examples: {}
      security:
      - auth: []
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /posts.reschedule:
    get:
      description: >-
        Re-schedule a scheduled post.

        It is possible to re-schedule only posts in `scheduled` state.

        ### Expected scopes

        `posts.schedule`

        ### Optional scopes

        `posts`

        ### Errors

        This table lists the expected errors that this function could return. However, other errors can be returned in the case where the service is down or other unexpected factors affect processing. Callers should always check the value of the `ok` property in the response.

        | Error                | Description |

        |----------------------|-------------|

        | `access_denied`      | Access denied.

        | `invalid_post_state` | Requested post is in invalid state, not in `scheduled` in this case.

        | `post_not_found`     | Requested post not found.

        | `queue_blocked`      | Destination queue of this post is blocked.

        | `user_not_found`     | Authentication token user not found.

        | `user_inactive`      | Authentication token is for a deleted user.

        | `invalid_request`    | The function was passed invalid request or argument(s).

        | `not_authed`         | No authentication token provided.

        | `invalid_auth`       | Invalid authentication token.

        | `missing_arg`        | The function was not passed all required argument(s).

        | `internal_error`     | Internal error.
      summary: posts.reschedule
      tags:
      - posts
      operationId: PostsRescheduleGet
      produces:
      - application/json
      parameters:
      - name: access_token
        in: query
        required: true
        type: string
        description: Authentication token. **Requires scope:** `posts.schedule`
      - name: post
        in: query
        required: true
        type: string
        description: Post to re-schedule
      - name: schedule
        in: query
        required: false
        enum:
        - at
        - now
        - first
        - last
        type: string
        description: Which type of scheduler should be used. The post can be published `now` or `at` time specified by `publish_at` parameter or added to the queue as a `first` or `last` to be published, meaning to the begin or the end of the queue.
      - name: publish_at
        in: query
        required: false
        type: number
        format: double
        description: When should be the post published (unix timestamp).
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/PostRescheduleResponse'
          examples: {}
      security:
      - auth: []
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /posts.delete:
    get:
      description: >-
        Delete a post no matter the posts state.

        Property `deleted` will be false and `ok` will be true if the post is not found.

        ### Expected scopes

        `posts.write`

        ### Optional scopes

        `posts`

        ### Errors

        This table lists the expected errors that this function could return. However, other errors can be returned in the case where the service is down or other unexpected factors affect processing. Callers should always check the value of the `ok` property in the response.

        | Error              | Description |

        |--------------------|-------------|

        | `access_denied`    | Access denied.

        | `post_not_found`   | Requested post not found.

        | `user_not_found`   | Authentication token user not found.

        | `user_inactive`    | Authentication token is for a deleted user.

        | `not_authed`       | No authentication token provided.

        | `invalid_auth`     | Invalid authentication token.

        | `missing_arg`      | The function was not passed all required argument(s).

        | `internal_error`   | Internal error.
      summary: posts.delete
      tags:
      - posts
      operationId: PostsDeleteGet
      produces:
      - application/json
      parameters:
      - name: access_token
        in: query
        required: true
        type: string
        description: Authentication token. **Requires scope:** `posts.write`
      - name: post
        in: query
        required: true
        type: string
        description: Post to delete
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/PostDeleteResponse'
          examples:
            application/json:
              ok: true
              deleted: true
      security:
      - auth: []
      x-unitTests:
      - request:
          method: GET
          uri: /posts.delete?access_token=ACCESS_TOKEN&post=5995521a055975000ff26080
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: '{    "ok": true,    "deleted": true}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: posts.delete1
        x-testDescription: >-
          Delete a post no matter the posts state.

          Property `deleted` will be false and `ok` will be true if the post is not found.

          ### Expected scopes

          `posts.write`

          ### Optional scopes

          `posts`

          ### Errors

          This table lists the expected errors that this function could return. However, other errors can be returned in the case where the service is down or other unexpected factors affect processing. Callers should always check the value of the `ok` property in the response.

          | Error              | Description |

          |--------------------|-------------|

          | `access_denied`    | Access denied.

          | `post_not_found`   | Requested post not found.

          | `user_not_found`   | Authentication token user not found.

          | `user_inactive`    | Authentication token is for a deleted user.

          | `not_authed`       | No authentication token provided.

          | `invalid_auth`     | Invalid authentication token.

          | `missing_arg`      | The function was not passed all required argument(s).

          | `internal_error`   | Internal error.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /drafts.list:
    get:
      description: >-
        Fetches list of drafts.

        This function returns a portion of drafts. To read the entire list, call the function with no `latest` or `oldest` arguments, and then continue paging using the instructions below.

        `latest` or `oldest` arguments refer to drafts `modified` timestamp;

        The `drafts` array up to 100 drafts between `latest` and `oldest`. If there were more than 100 drafts between those two points, then `has_more` will be true.

        If a draft has the same `modified` as `latest` or `oldest` it will not be included in the list, unless `inclusive` is true. This allows a client to fetch all drafts in a hole, by calling drafts.list with `latest` set to the oldest draft they have after the hole, and `oldest` to the latest draft they have before the hole. If the response includes `has_more` then the client can make another call, using the `modified` value of the final drafts as the `latest` param to get the next page of drafts.

        If there are more than 100 drafts between the two timestamps then the drafts returned are the ones closest to `latest`. In most cases an application will want the most recent drafts and will page forward from there. If `oldest` is provided but not `latest` then the drafts returned are those closest to `oldest`, allowing you to page forward through the queue if desired.

        ### Expected scopes

        `drafts.read`

        ### Optional scopes

        `drafts`

        ### Errors

        This table lists the expected errors that this function could return. However, other errors can be returned in the case where the service is down or other unexpected factors affect processing. Callers should always check the value of the `ok` property in the response.

        | Error               | Description |

        |---------------------|-------------|

        | `access_denied`     | Access denied.

        | `user_not_found`    | Authentication token user not found.

        | `user_inactive`     | Authentication token is for a deleted user.

        | `team_not_found`    | Requested team not found.

        | `invalid_ts_latest` | Value passed for `latest` was invalid

        | `invalid_ts_oldest` | Value passed for `oldest` was invalid

        | `not_authed`        | No authentication token provided.

        | `invalid_auth`      | Invalid authentication token.

        | `missing_arg`       | The function was not passed all required argument(s).

        | `internal_error`    | Internal error.
      summary: drafts.list
      tags:
      - drafts
      operationId: DraftsListGet
      produces:
      - application/json
      parameters:
      - name: access_token
        in: query
        required: true
        type: string
        description: Authentication token. **Requires scope:** `drafts.read`
      - name: team
        in: query
        required: true
        type: string
        description: List this team drafts.
      - name: count
        in: query
        required: false
        type: number
        format: double
        description: Number of drafts to return, between 1 and 1000.
      - name: inclusive
        in: query
        required: false
        type: boolean
        description: Include drafts with latest or oldest timestamp in results.
      - name: latest
        in: query
        required: false
        type: number
        format: double
        description: End of time range of drafts to include in results.
      - name: oldest
        in: query
        required: false
        type: number
        format: double
        description: Start of time range of drafts to include in results.
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/DraftsResponse'
          examples:
            application/json:
              ok: true
              latest: 1502969448
              has_more: false
              drafts:
              - draft_id: 5995531a055975000ff260c0
                created: 1502959448
                created_by:
                  user_id: 53ed091db33c30ef172172ed
                  name: Alois Bělaška
                  avatar: https://lh3.googleusercontent.com/-TBgNki-dgJs/AAAAAAAAAAI/AAAAAAADVq8/G8RPk8VD2ak/s50/photo.jpg
                modified: 1502969448
                modified_by:
                  user_id: 53ed091db33c30ef172172ed
                  name: Alois Bělaška
                  avatar: https://lh3.googleusercontent.com/-TBgNki-dgJs/AAAAAAAAAAI/AAAAAAADVq8/G8RPk8VD2ak/s50/photo.jpg
                html: <p>Merry Christmas Everyone!</p>
                attachments:
                - type: link
                  description: Publish at the right time, reach more customers and increase engagement. The right cross-promotion, content management and scheduling solution for you. Ramp Up Sales!
                  title: Friends+Me - Share to ANYWHERE. Because sharing is caring.
                  url: https://friendsplus.me
                  picture:
                    content_type: image/jpeg
                    height: 827
                    width: 1280
                    url: https://lh3.googleusercontent.com/S3I41DrddGBWTqwgmrXv0-6b7zzeNBE73e3e_-HsMfK4Sk5NNjvaOQacCJeyUOuGXAfWeqi30Hnu1UgcI32adtIr2Ib8
      security:
      - auth: []
      x-unitTests:
      - request:
          method: GET
          uri: /drafts.list?access_token=ACCESS_TOKEN&team=539c5b8bfb1d60bf42125524&count=100&inclusive=true&latest=1515106000&oldest=0
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: '{    "ok": true,    "latest": 1502969448,    "has_more": false,    "drafts": [        {            "draft_id": "5995531a055975000ff260c0",            "created": 1502959448,            "created_by": {                "user_id": "53ed091db33c30ef172172ed",                "name": "Alois Bělaška",                "avatar": "https://lh3.googleusercontent.com/-TBgNki-dgJs/AAAAAAAAAAI/AAAAAAADVq8/G8RPk8VD2ak/s50/photo.jpg"            },            "modified": 1502969448,            "modified_by": {                "user_id": "53ed091db33c30ef172172ed",                "name": "Alois Bělaška",                "avatar": "https://lh3.googleusercontent.com/-TBgNki-dgJs/AAAAAAAAAAI/AAAAAAADVq8/G8RPk8VD2ak/s50/photo.jpg"            },            "html": "<p>Merry Christmas Everyone!</p>",            "attachments": [                {                    "type": "link",                    "description" : "Publish at the right time, reach more customers and increase engagement. The right cross-promotion, content management and scheduling solution for you. Ramp Up Sales!",                    "title" : "Friends+Me - Share to ANYWHERE. Because sharing is caring.",                    "url" : "https://friendsplus.me",                    "picture": {                        "content_type" : "image/jpeg",                        "height" : 827,                        "width" : 1280,                        "url" : "https://lh3.googleusercontent.com/S3I41DrddGBWTqwgmrXv0-6b7zzeNBE73e3e_-HsMfK4Sk5NNjvaOQacCJeyUOuGXAfWeqi30Hnu1UgcI32adtIr2Ib8"                    }                }            ]        }    ]}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: drafts.list1
        x-testDescription: >-
          Fetches list of drafts.

          This function returns a portion of drafts. To read the entire list, call the function with no `latest` or `oldest` arguments, and then continue paging using the instructions below.

          `latest` or `oldest` arguments refer to drafts `modified` timestamp;

          The `drafts` array up to 100 drafts between `latest` and `oldest`. If there were more than 100 drafts between those two points, then `has_more` will be true.

          If a draft has the same `modified` as `latest` or `oldest` it will not be included in the list, unless `inclusive` is true. This allows a client to fetch all drafts in a hole, by calling drafts.list with `latest` set to the oldest draft they have after the hole, and `oldest` to the latest draft they have before the hole. If the response includes `has_more` then the client can make another call, using the `modified` value of the final drafts as the `latest` param to get the next page of drafts.

          If there are more than 100 drafts between the two timestamps then the drafts returned are the ones closest to `latest`. In most cases an application will want the most recent drafts and will page forward from there. If `oldest` is provided but not `latest` then the drafts returned are those closest to `oldest`, allowing you to page forward through the queue if desired.

          ### Expected scopes

          `drafts.read`

          ### Optional scopes

          `drafts`

          ### Errors

          This table lists the expected errors that this function could return. However, other errors can be returned in the case where the service is down or other unexpected factors affect processing. Callers should always check the value of the `ok` property in the response.

          | Error               | Description |

          |---------------------|-------------|

          | `access_denied`     | Access denied.

          | `user_not_found`    | Authentication token user not found.

          | `user_inactive`     | Authentication token is for a deleted user.

          | `team_not_found`    | Requested team not found.

          | `invalid_ts_latest` | Value passed for `latest` was invalid

          | `invalid_ts_oldest` | Value passed for `oldest` was invalid

          | `not_authed`        | No authentication token provided.

          | `invalid_auth`      | Invalid authentication token.

          | `missing_arg`       | The function was not passed all required argument(s).

          | `internal_error`    | Internal error.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /drafts.info:
    get:
      description: >-
        Gets information about a draft.

        ### Expected scopes

        `drafts.read`

        ### Optional scopes

        `drafts`

        ### Errors

        This table lists the expected errors that this function could return. However, other errors can be returned in the case where the service is down or other unexpected factors affect processing. Callers should always check the value of the `ok` property in the response.

        | Error              | Description |

        |--------------------|-------------|

        | `access_denied`    | Access denied.

        | `draft_not_found`  | Requested draft not found.

        | `user_not_found`   | Authentication token user not found.

        | `user_inactive`    | Authentication token is for a deleted user.

        | `not_authed`       | No authentication token provided.

        | `invalid_auth`     | Invalid authentication token.

        | `missing_arg`      | The function was not passed all required argument(s).

        | `internal_error`   | Internal error.
      summary: drafts.info
      tags:
      - drafts
      operationId: DraftsInfoGet
      produces:
      - application/json
      parameters:
      - name: access_token
        in: query
        required: true
        type: string
        description: Authentication token. **Requires scope:** `drafts.read`
      - name: draft
        in: query
        required: true
        type: string
        description: Draft to get info on
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/DraftResponse'
          examples:
            application/json:
              ok: true
              draft:
                draft_id: 5995531a055975000ff260c0
                created: 1502959448
                created_by:
                  user_id: 53ed091db33c30ef172172ed
                  name: Alois Bělaška
                  avatar: https://lh3.googleusercontent.com/-TBgNki-dgJs/AAAAAAAAAAI/AAAAAAADVq8/G8RPk8VD2ak/s50/photo.jpg
                modified: 1502969448
                modified_by:
                  user_id: 53ed091db33c30ef172172ed
                  name: Alois Bělaška
                  avatar: https://lh3.googleusercontent.com/-TBgNki-dgJs/AAAAAAAAAAI/AAAAAAADVq8/G8RPk8VD2ak/s50/photo.jpg
                html: <p>Merry Christmas Everyone!</p>
                attachments:
                - type: link
                  description: Publish at the right time, reach more customers and increase engagement. The right cross-promotion, content management and scheduling solution for you. Ramp Up Sales!
                  title: Friends+Me - Share to ANYWHERE. Because sharing is caring.
                  url: https://friendsplus.me
                  picture:
                    content_type: image/jpeg
                    height: 827
                    width: 1280
                    url: https://lh3.googleusercontent.com/S3I41DrddGBWTqwgmrXv0-6b7zzeNBE73e3e_-HsMfK4Sk5NNjvaOQacCJeyUOuGXAfWeqi30Hnu1UgcI32adtIr2Ib8
      security:
      - auth: []
      x-unitTests:
      - request:
          method: GET
          uri: /drafts.info?access_token=ACCESS_TOKEN&draft=5995531a055975000ff260c0
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: '{    "ok": true,    "draft": {        "draft_id": "5995531a055975000ff260c0",        "created": 1502959448,        "created_by": {            "user_id": "53ed091db33c30ef172172ed",            "name": "Alois Bělaška",            "avatar": "https://lh3.googleusercontent.com/-TBgNki-dgJs/AAAAAAAAAAI/AAAAAAADVq8/G8RPk8VD2ak/s50/photo.jpg"        },        "modified": 1502969448,        "modified_by": {            "user_id": "53ed091db33c30ef172172ed",            "name": "Alois Bělaška",            "avatar": "https://lh3.googleusercontent.com/-TBgNki-dgJs/AAAAAAAAAAI/AAAAAAADVq8/G8RPk8VD2ak/s50/photo.jpg"        },        "html": "<p>Merry Christmas Everyone!</p>",        "attachments": [            {                "type": "link",                "description" : "Publish at the right time, reach more customers and increase engagement. The right cross-promotion, content management and scheduling solution for you. Ramp Up Sales!",                "title" : "Friends+Me - Share to ANYWHERE. Because sharing is caring.",                "url" : "https://friendsplus.me",                "picture": {                    "content_type" : "image/jpeg",                    "height" : 827,                    "width" : 1280,                    "url" : "https://lh3.googleusercontent.com/S3I41DrddGBWTqwgmrXv0-6b7zzeNBE73e3e_-HsMfK4Sk5NNjvaOQacCJeyUOuGXAfWeqi30Hnu1UgcI32adtIr2Ib8"                }            }        ]    }}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: drafts.info1
        x-testDescription: >-
          Gets information about a draft.

          ### Expected scopes

          `drafts.read`

          ### Optional scopes

          `drafts`

          ### Errors

          This table lists the expected errors that this function could return. However, other errors can be returned in the case where the service is down or other unexpected factors affect processing. Callers should always check the value of the `ok` property in the response.

          | Error              | Description |

          |--------------------|-------------|

          | `access_denied`    | Access denied.

          | `draft_not_found`  | Requested draft not found.

          | `user_not_found`   | Authentication token user not found.

          | `user_inactive`    | Authentication token is for a deleted user.

          | `not_authed`       | No authentication token provided.

          | `invalid_auth`     | Invalid authentication token.

          | `missing_arg`      | The function was not passed all required argument(s).

          | `internal_error`   | Internal error.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /drafts.create:
    post:
      description: >-
        Create a draft.

        ### Expected scopes

        `drafts.write`

        ### Optional scopes

        `drafts`

        ### Errors

        This table lists the expected errors that this function could return. However, other errors can be returned in the case where the service is down or other unexpected factors affect processing. Callers should always check the value of the `ok` property in the response.

        | Error              | Description |

        |--------------------|-------------|

        | `access_denied`    | Access denied.

        | `team_not_found`   | Requested team not found.

        | `user_not_found`   | Authentication token user not found.

        | `user_inactive`    | Authentication token is for a deleted user.

        | `not_authed`       | No authentication token provided.

        | `invalid_auth`     | Invalid authentication token.

        | `missing_arg`      | The function was not passed all required argument(s).

        | `internal_error`   | Internal error.
      summary: drafts.create
      tags:
      - drafts
      operationId: DraftsCreatePost
      produces:
      - application/json
      parameters:
      - name: access_token
        in: query
        required: true
        type: string
        description: Authentication token. **Requires scope:** `drafts.write`
      - name: team
        in: query
        required: true
        type: string
        description: Create a draft for this team.
      - name: body
        in: body
        required: true
        description: ''
        schema:
          $ref: '#/definitions/DraftCreateRequest'
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/DraftCreateResponse'
          examples:
            application/json:
              ok: true
              draft:
                draft_id: 5995531a055975000ff260c0
                created: 1502959448
                created_by:
                  user_id: 53ed091db33c30ef172172ed
                  name: Alois Bělaška
                  avatar: https://lh3.googleusercontent.com/-TBgNki-dgJs/AAAAAAAAAAI/AAAAAAADVq8/G8RPk8VD2ak/s50/photo.jpg
                modified: 1502969448
                modified_by:
                  user_id: 53ed091db33c30ef172172ed
                  name: Alois Bělaška
                  avatar: https://lh3.googleusercontent.com/-TBgNki-dgJs/AAAAAAAAAAI/AAAAAAADVq8/G8RPk8VD2ak/s50/photo.jpg
                html: <p>Merry Christmas Everyone!</p>
                attachments:
                - type: link
                  description: Publish at the right time, reach more customers and increase engagement. The right cross-promotion, content management and scheduling solution for you. Ramp Up Sales!
                  title: Friends+Me - Share to ANYWHERE. Because sharing is caring.
                  url: https://friendsplus.me
                  picture:
                    content_type: image/jpeg
                    height: 827
                    width: 1280
                    url: https://lh3.googleusercontent.com/S3I41DrddGBWTqwgmrXv0-6b7zzeNBE73e3e_-HsMfK4Sk5NNjvaOQacCJeyUOuGXAfWeqi30Hnu1UgcI32adtIr2Ib8
      security:
      - auth: []
      x-unitTests:
      - request:
          method: POST
          uri: /drafts.create?access_token=ACCESS_TOKEN&team=539c5b8bfb1d60bf42125524
          headers:
            Content-Type: application/json
          body: '{    "html": "<p>Merry Christmas Everyone!</p>",    "link": "https://friendsplus.me"}'
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: '{    "ok": true,    "draft": {        "draft_id": "5995531a055975000ff260c0",        "created": 1502959448,        "created_by": {            "user_id": "53ed091db33c30ef172172ed",            "name": "Alois Bělaška",            "avatar": "https://lh3.googleusercontent.com/-TBgNki-dgJs/AAAAAAAAAAI/AAAAAAADVq8/G8RPk8VD2ak/s50/photo.jpg"        },        "modified": 1502969448,        "modified_by": {            "user_id": "53ed091db33c30ef172172ed",            "name": "Alois Bělaška",            "avatar": "https://lh3.googleusercontent.com/-TBgNki-dgJs/AAAAAAAAAAI/AAAAAAADVq8/G8RPk8VD2ak/s50/photo.jpg"        },        "html": "<p>Merry Christmas Everyone!</p>",        "attachments": [            {                "type": "link",                "description" : "Publish at the right time, reach more customers and increase engagement. The right cross-promotion, content management and scheduling solution for you. Ramp Up Sales!",                "title" : "Friends+Me - Share to ANYWHERE. Because sharing is caring.",                "url" : "https://friendsplus.me",                "picture": {                    "content_type" : "image/jpeg",                    "height" : 827,                    "width" : 1280,                    "url" : "https://lh3.googleusercontent.com/S3I41DrddGBWTqwgmrXv0-6b7zzeNBE73e3e_-HsMfK4Sk5NNjvaOQacCJeyUOuGXAfWeqi30Hnu1UgcI32adtIr2Ib8"                }            }        ]    }}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: drafts.create1
        x-testDescription: >-
          Create a draft.

          ### Expected scopes

          `drafts.write`

          ### Optional scopes

          `drafts`

          ### Errors

          This table lists the expected errors that this function could return. However, other errors can be returned in the case where the service is down or other unexpected factors affect processing. Callers should always check the value of the `ok` property in the response.

          | Error              | Description |

          |--------------------|-------------|

          | `access_denied`    | Access denied.

          | `team_not_found`   | Requested team not found.

          | `user_not_found`   | Authentication token user not found.

          | `user_inactive`    | Authentication token is for a deleted user.

          | `not_authed`       | No authentication token provided.

          | `invalid_auth`     | Invalid authentication token.

          | `missing_arg`      | The function was not passed all required argument(s).

          | `internal_error`   | Internal error.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /drafts.update:
    post:
      description: >-
        Update a draft.

        Attached link will be removed if the request property `link` is set to `null` and link will not be updated in any way if the `link` property is not present within the request.

        And the same applies for the `pictures` property, attached pictures will be removed if the request `pictures` property is set to `null` and pictures will not be updated in any way if the `pictures` property is not present within the request.

        ### Expected scopes

        `drafts.write`

        ### Optional scopes

        `drafts`

        ### Errors

        This table lists the expected errors that this function could return. However, other errors can be returned in the case where the service is down or other unexpected factors affect processing. Callers should always check the value of the `ok` property in the response.

        | Error              | Description |

        |--------------------|-------------|

        | `access_denied`    | Access denied.

        | `draft_not_found`  | Requested draft not found.

        | `user_not_found`   | Authentication token user not found.

        | `user_inactive`    | Authentication token is for a deleted user.

        | `not_authed`       | No authentication token provided.

        | `invalid_auth`     | Invalid authentication token.

        | `missing_arg`      | The function was not passed all required argument(s).

        | `internal_error`   | Internal error.
      summary: drafts.update
      tags:
      - drafts
      operationId: DraftsUpdatePost
      produces:
      - application/json
      parameters:
      - name: access_token
        in: query
        required: true
        type: string
        description: Authentication token. **Requires scope:** `drafts.write`
      - name: draft
        in: query
        required: true
        type: string
        description: Draft to update
      - name: body
        in: body
        required: true
        description: ''
        schema:
          $ref: '#/definitions/DraftUpdateRequest'
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/DraftUpdateResponse'
          examples:
            application/json:
              ok: true
              draft:
                draft_id: 5995531a055975000ff260c0
                created: 1502959448
                created_by:
                  user_id: 53ed091db33c30ef172172ed
                  name: Alois Bělaška
                  avatar: https://lh3.googleusercontent.com/-TBgNki-dgJs/AAAAAAAAAAI/AAAAAAADVq8/G8RPk8VD2ak/s50/photo.jpg
                modified: 1502969448
                modified_by:
                  user_id: 53ed091db33c30ef172172ed
                  name: Alois Bělaška
                  avatar: https://lh3.googleusercontent.com/-TBgNki-dgJs/AAAAAAAAAAI/AAAAAAADVq8/G8RPk8VD2ak/s50/photo.jpg
                html: <p>Merry Christmas Everyone And Happy New Year</p>
                attachments:
                - type: link
                  description: Publish at the right time, reach more customers and increase engagement. The right cross-promotion, content management and scheduling solution for you. Ramp Up Sales!
                  title: Friends+Me - Share to ANYWHERE. Because sharing is caring.
                  url: https://friendsplus.me
                  picture:
                    content_type: image/jpeg
                    height: 827
                    width: 1280
                    url: https://lh3.googleusercontent.com/S3I41DrddGBWTqwgmrXv0-6b7zzeNBE73e3e_-HsMfK4Sk5NNjvaOQacCJeyUOuGXAfWeqi30Hnu1UgcI32adtIr2Ib8
      security:
      - auth: []
      x-unitTests:
      - request:
          method: POST
          uri: /drafts.update?access_token=ACCESS_TOKEN&draft=5995531a055975000ff260c0
          headers:
            Content-Type: application/json
          body: '{    "html": "<p>Merry Christmas Everyone And Happy New Year</p>"}'
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: '{    "ok": true,    "draft": {        "draft_id": "5995531a055975000ff260c0",        "created": 1502959448,        "created_by": {            "user_id": "53ed091db33c30ef172172ed",            "name": "Alois Bělaška",            "avatar": "https://lh3.googleusercontent.com/-TBgNki-dgJs/AAAAAAAAAAI/AAAAAAADVq8/G8RPk8VD2ak/s50/photo.jpg"        },        "modified": 1502969448,        "modified_by": {            "user_id": "53ed091db33c30ef172172ed",            "name": "Alois Bělaška",            "avatar": "https://lh3.googleusercontent.com/-TBgNki-dgJs/AAAAAAAAAAI/AAAAAAADVq8/G8RPk8VD2ak/s50/photo.jpg"        },        "html": "<p>Merry Christmas Everyone And Happy New Year</p>",        "attachments": [            {                "type": "link",                "description" : "Publish at the right time, reach more customers and increase engagement. The right cross-promotion, content management and scheduling solution for you. Ramp Up Sales!",                "title" : "Friends+Me - Share to ANYWHERE. Because sharing is caring.",                "url" : "https://friendsplus.me",                "picture": {                    "content_type" : "image/jpeg",                    "height" : 827,                    "width" : 1280,                    "url" : "https://lh3.googleusercontent.com/S3I41DrddGBWTqwgmrXv0-6b7zzeNBE73e3e_-HsMfK4Sk5NNjvaOQacCJeyUOuGXAfWeqi30Hnu1UgcI32adtIr2Ib8"                }            }        ]    }}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: drafts.update1
        x-testDescription: >-
          Update a draft.

          Attached link will be removed if the request property `link` is set to `null` and link will not be updated in any way if the `link` property is not present within the request.

          And the same applies for the `pictures` property, attached pictures will be removed if the request `pictures` property is set to `null` and pictures will not be updated in any way if the `pictures` property is not present within the request.

          ### Expected scopes

          `drafts.write`

          ### Optional scopes

          `drafts`

          ### Errors

          This table lists the expected errors that this function could return. However, other errors can be returned in the case where the service is down or other unexpected factors affect processing. Callers should always check the value of the `ok` property in the response.

          | Error              | Description |

          |--------------------|-------------|

          | `access_denied`    | Access denied.

          | `draft_not_found`  | Requested draft not found.

          | `user_not_found`   | Authentication token user not found.

          | `user_inactive`    | Authentication token is for a deleted user.

          | `not_authed`       | No authentication token provided.

          | `invalid_auth`     | Invalid authentication token.

          | `missing_arg`      | The function was not passed all required argument(s).

          | `internal_error`   | Internal error.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /drafts.schedule:
    get:
      description: >-
        Schedule a draft.

        Original draft is deleted after new post is created and scheduled.

        ### Expected scopes

        `posts.schedule`

        ### Optional scopes

        `posts`

        ### Errors

        This table lists the expected errors that this function could return. However, other errors can be returned in the case where the service is down or other unexpected factors affect processing. Callers should always check the value of the `ok` property in the response.

        | Error              | Description |

        |--------------------|-------------|

        | `access_denied`    | Access denied.

        | `draft_not_found`  | Requested draft not found.

        | `queue_not_found`  | Requested queue not found.

        | `queue_blocked`    | Destination queue of this post is blocked.

        | `queue_size_limit` | Queue size limit reached.

        | `user_not_found`   | Authentication token user not found.

        | `user_inactive`    | Authentication token is for a deleted user.

        | `not_authed`       | No authentication token provided.

        | `invalid_auth`     | Invalid authentication token.

        | `missing_arg`      | The function was not passed all required argument(s).

        | `internal_error`   | Internal error.
      summary: drafts.schedule
      tags:
      - drafts
      operationId: DraftsScheduleGet
      produces:
      - application/json
      parameters:
      - name: access_token
        in: query
        required: true
        type: string
        description: Authentication token. **Requires scope:** `posts.schedule`
      - name: draft
        in: query
        required: true
        type: string
        description: Draft to schedule
      - name: queue
        in: query
        required: true
        type: string
        description: Queue for which should be this draft scheduled.
      - name: schedule
        in: query
        required: false
        enum:
        - at
        - now
        - first
        - last
        type: string
        description: Which type of scheduler should be used. The draft can be published `now` or `at` time specified by `publish_at` parameter or added to the queue as a `first` or `last` to be published, meaning to the begin or the end of the queue.
      - name: publish_at
        in: query
        required: false
        type: number
        format: double
        description: When should be the draft published (unix timestamp).
      - name: no_channeling
        in: query
        required: false
        type: boolean
        description: Disable post channeling, post will not be cross-promoted to other queues. Used only for scheduling of Google+ posts at the moment.
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/DraftScheduleResponse'
          examples: {}
      security:
      - auth: []
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /drafts.delete:
    get:
      description: >-
        Delete a draft.

        Property `deleted` will be false and `ok` will be true if the draft is not found.

        ### Expected scopes

        `drafts.write`

        ### Optional scopes

        `drafts`

        ### Errors

        This table lists the expected errors that this function could return. However, other errors can be returned in the case where the service is down or other unexpected factors affect processing. Callers should always check the value of the `ok` property in the response.

        | Error              | Description |

        |--------------------|-------------|

        | `access_denied`    | Access denied.

        | `draft_not_found`  | Requested draft not found.

        | `user_not_found`   | Authentication token user not found.

        | `user_inactive`    | Authentication token is for a deleted user.

        | `not_authed`       | No authentication token provided.

        | `invalid_auth`     | Invalid authentication token.

        | `missing_arg`      | The function was not passed all required argument(s).

        | `internal_error`   | Internal error.
      summary: drafts.delete
      tags:
      - drafts
      operationId: DraftsDeleteGet
      produces:
      - application/json
      parameters:
      - name: access_token
        in: query
        required: true
        type: string
        description: Authentication token. **Requires scope:** `drafts.write`
      - name: draft
        in: query
        required: true
        type: string
        description: Draft to delete
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/DraftDeleteResponse'
          examples:
            application/json:
              ok: true
              deleted: true
      security:
      - auth: []
      x-unitTests:
      - request:
          method: GET
          uri: /drafts.delete?access_token=ACCESS_TOKEN&draft=5995531a055975000ff260c0
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: '{    "ok": true,    "deleted": true}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: drafts.delete1
        x-testDescription: >-
          Delete a draft.

          Property `deleted` will be false and `ok` will be true if the draft is not found.

          ### Expected scopes

          `drafts.write`

          ### Optional scopes

          `drafts`

          ### Errors

          This table lists the expected errors that this function could return. However, other errors can be returned in the case where the service is down or other unexpected factors affect processing. Callers should always check the value of the `ok` property in the response.

          | Error              | Description |

          |--------------------|-------------|

          | `access_denied`    | Access denied.

          | `draft_not_found`  | Requested draft not found.

          | `user_not_found`   | Authentication token user not found.

          | `user_inactive`    | Authentication token is for a deleted user.

          | `not_authed`       | No authentication token provided.

          | `invalid_auth`     | Invalid authentication token.

          | `missing_arg`      | The function was not passed all required argument(s).

          | `internal_error`   | Internal error.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
definitions:
  OauthGrantType:
    title: OAuth Grant Type
    example: authorization_code
    type: string
    enum:
    - authorization_code
    - refresh_token
  UserIdentity:
    title: User Identity
    type: object
    properties:
      user_id:
        description: User identificator.
        type: string
      name:
        description: User name.
        type: string
    required:
    - user_id
    - name
  UserIdentityEmail:
    title: User Identity Email
    type: object
    properties:
      email:
        description: 'User email. Requires scope: `identity.email`.'
        example: alois@domain.com
        type: string
  UserIdentityAvatar:
    title: User Identity Avatar
    type: object
    properties:
      avatar:
        description: ''
        type: string
  UserIdentityFull:
    title: User Identity Full
    allOf:
    - $ref: '#/definitions/UserIdentity'
    - type: object
      properties:
        email:
          description: 'User email. Requires scope: `identity.email`.'
          example: alois@domain.com
          type: string
        avatar:
          description: ''
          type: string
  UserReference:
    title: User Reference
    allOf:
    - $ref: '#/definitions/UserIdentity'
    - type: object
      properties:
        avatar:
          description: ''
          type: string
  UserBasic:
    title: User Basic
    allOf:
    - $ref: '#/definitions/UserReference'
    - type: object
      properties:
        created:
          description: (unix timestamp).
          example: 1502951493
          type: number
          format: double
      required:
      - created
  UserFull:
    title: User Full
    allOf:
    - $ref: '#/definitions/UserBasic'
    - type: object
      properties:
        email:
          description: 'User email. Requires scope: `users.read.email`.'
          example: alois@domain.com
          type: string
  TeamMemberRole:
    title: Team Member Role
    example: owner
    type: string
    enum:
    - owner
    - tmanager
    - qmanager
    - contributor
  TeamMember:
    title: Team Member
    allOf:
    - $ref: '#/definitions/UserReference'
    - type: object
      properties:
        role:
          $ref: '#/definitions/TeamMemberRole'
      required:
      - role
  Team:
    title: Team
    type: object
    properties:
      team_id:
        description: Team identificator.
        type: string
      created:
        description: (unix timestamp).
        type: number
        format: double
      name:
        description: Team name.
        type: string
      members:
        description: List of team members.
        type: array
        items:
          $ref: '#/definitions/TeamMember'
      queues:
        description: List of queues.
        type: array
        items:
          $ref: '#/definitions/Queue'
    required:
    - team_id
    - created
    - name
  Queue:
    title: Queue
    type: object
    properties:
      queue_id:
        description: Queue identificator.
        type: string
      created:
        description: Date and time of creation (Unix timestamp).
        type: number
        format: double
      created_by:
        $ref: '#/definitions/UserReference'
      name:
        description: Queue name.
        type: string
      state:
        $ref: '#/definitions/QueueState'
      picture:
        description: ''
        type: string
      service:
        $ref: '#/definitions/Service'
      scheduling:
        $ref: '#/definitions/QueueScheduling'
      reconnected:
        description: Date and time of last reconnect (Unix timestamp).
        type: number
        format: double
      size:
        description: Queue size, number of posts scheduled to be published.
        type: number
        format: double
    required:
    - queue_id
    - created
    - created_by
    - name
    - state
    - picture
    - service
    - scheduling
  QueueState:
    title: Queue State
    example: enabled
    type: string
    enum:
    - enabled
    - paused
    - blocked
    - reconnect_required
  Service:
    title: Service
    type: object
    properties:
      type:
        $ref: '#/definitions/ServiceType'
      category:
        $ref: '#/definitions/ServiceCategory'
      id:
        description: Queue service user identification.
        type: string
      url:
        description: ''
        type: string
    required:
    - type
    - category
    - id
  ServiceType:
    title: Service Type
    example: facebook
    type: string
    enum:
    - facebook
    - google
    - twitter
    - linkedin
    - tumblr
    - pinterest
    - instagram
  ServiceCategory:
    title: Service Category
    example: profile
    type: string
    enum:
    - profile
    - page
    - blog
    - group
    - board
    - community
    - collection
  QueueScheduling:
    title: Queue Scheduling
    type: object
    properties:
      timezone:
        description: Time zone name. [List of tz database time zones](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
        example: Europe/Prague
        type: string
      schedules:
        description: Set of schedules.
        type: array
        items:
          $ref: '#/definitions/QueueSchedule'
    required:
    - timezone
    - schedules
  QueueSchedule:
    title: Queue Schedule
    type: object
    properties:
      days:
        description: Set of weekdays for which this schedule applies.
        type: array
        items:
          type: string
      times:
        description: Set of times in 24-hour format, ex. 11:30, 20:25, ...
        type: array
        items:
          type: string
    required:
    - days
    - times
  QueueScheduleDays:
    title: Queue Schedule Days
    example: mon
    type: string
    enum:
    - mon
    - tue
    - wed
    - thu
    - fri
    - sat
    - sun
  PostState:
    title: Post State
    example: scheduled
    type: string
    enum:
    - scheduled
    - paused
    - publishing
    - published
    - failed
  PostSchedule:
    title: Post Schedule
    example: at
    type: string
    enum:
    - at
    - now
    - first
    - last
  AttachmentType:
    title: Attachment Type
    example: link
    type: string
    enum:
    - link
    - picture
  Attachment:
    title: Attachment
    type: object
    properties:
      type:
        $ref: '#/definitions/AttachmentType'
    required:
    - type
  Picture:
    title: Picture
    type: object
    properties:
      url:
        description: ''
        type: string
      content_type:
        description: Picture [MIME type](https://en.wikipedia.org/wiki/Media_type)
        type: string
      width:
        description: Width (pixels)
        type: number
        format: double
      height:
        description: Height (pixels)
        type: number
        format: double
    required:
    - url
  PictureAttachment:
    title: Picture Attachment
    allOf:
    - $ref: '#/definitions/Attachment'
    - type: object
      properties:
        url:
          description: ''
          type: string
        content_type:
          description: Picture [MIME type](https://en.wikipedia.org/wiki/Media_type)
          type: string
        width:
          description: Width (pixels)
          type: number
          format: double
        height:
          description: Height (pixels)
          type: number
          format: double
  LinkAttachment:
    title: Link Attachment
    allOf:
    - $ref: '#/definitions/Attachment'
    - type: object
      properties:
        url:
          description: ''
          type: string
        title:
          description: Link preview title.
          type: string
        description:
          description: Link preview short description.
          type: string
        picture:
          $ref: '#/definitions/Picture'
        pictures:
          description: List of pictures crawled from the link url, available for link preview. This property is present only in post preview.
          type: array
          items:
            $ref: '#/definitions/Picture'
      required:
      - url
      - title
      - description
  PostExchange:
    title: Post Exchange
    type: object
    properties:
      html:
        description: Post in html format, allowed tags p,b,i,s.
        type: string
      link:
        description: ''
        type: string
      picture:
        description: ''
        type: string
      pictures:
        description: Array of picture urls to attach to the post. Property `link` will be ignored if `pictures` is set.
        type: array
        items:
          type: string
    required:
    - html
  PostContent:
    title: Post Content
    type: object
    properties:
      html:
        description: Post in html format, allowed tags p,b,i,s.
        type: string
      attachments:
        description: List of attachments (picture, link, ...).
        type: array
        items:
          $ref: '#/definitions/LinkAttachment'
    required:
    - html
  Post:
    title: Post
    allOf:
    - $ref: '#/definitions/PostContent'
    - type: object
      properties:
        post_id:
          description: Post identificator.
          type: string
        queue_id:
          description: Destination queue for which was the post scheduled.
          type: string
        team_id:
          description: Team the destination queue is assigned to.
          type: string
        created:
          description: When was the post created (unix timestamp).
          type: number
          format: double
        publish_at:
          description: When should be the post published (unix timestamp).
          type: number
          format: double
        state:
          $ref: '#/definitions/PostState'
        service:
          $ref: '#/definitions/Service'
        created_by:
          $ref: '#/definitions/UserReference'
        modified_by:
          $ref: '#/definitions/UserReference'
        modified:
          description: When was the post last modified (unix timestamp).
          type: number
          format: double
        completed_at:
          description: When was the post completed [published or abandoned] (unix timestamp).
          type: number
          format: double
        url:
          description: ''
          type: string
      required:
      - post_id
      - queue_id
      - team_id
      - created
      - publish_at
      - state
      - service
  DraftExchange:
    title: Draft Exchange
    type: object
    properties:
      html:
        description: Post in html format, allowed tags p,b,i,s.
        type: string
      link:
        description: ''
        type: string
      picture:
        description: ''
        type: string
      pictures:
        description: Array of picture urls to attach to the post. Property `link` will be ignored if `pictures` is set.
        type: array
        items:
          type: string
    required:
    - html
  DraftContent:
    title: Draft Content
    type: object
    properties:
      html:
        description: Post in html format, allowed tags p,b,i,s.
        type: string
      attachments:
        description: List of attachments (picture, link, ...).
        type: array
        items:
          $ref: '#/definitions/LinkAttachment'
    required:
    - html
  Draft:
    title: Draft
    allOf:
    - $ref: '#/definitions/DraftContent'
    - type: object
      properties:
        draft_id:
          description: Draft identificator.
          type: string
        created:
          description: When was the draft created (unix timestamp).
          type: number
          format: double
        created_by:
          $ref: '#/definitions/UserReference'
        modified_by:
          $ref: '#/definitions/UserReference'
        modified:
          description: When was the draft last modified (unix timestamp).
          type: number
          format: double
      required:
      - draft_id
      - created
  Response:
    title: Response
    example:
      ok: false
      error: my_error
      args:
        foo: bar
        error: my_error
    type: object
    properties:
      ok:
        description: Indicates success or failure.
        type: boolean
    required:
    - ok
  TeamsResponse:
    title: Teams Response
    allOf:
    - $ref: '#/definitions/Response'
    - example:
        ok: true
        teams:
        - team_id: 539c5b8bfb1d60bf42125524
          created: 1502951493
          name: Social Team
          members:
          - user_id: 53ed091db33c30ef172172ed
            name: Alois Bělaška
            role: owner
            avatar: https://lh3.googleusercontent.com/-TBgNki-dgJs/AAAAAAAAAAI/AAAAAAADVq8/G8RPk8VD2ak/s50/photo.jpg
          - user_id: 53ed091db33c30ef172172ee
            name: John Doe
            role: tmanager
            avatar: https://lh3.googleusercontent.com/image/-n-0L5nvI570/AAAAAAAAAAI/AAAAAAAAAAA/V0sHAqXP4pk/s50/photo.jpg
          queues:
          - queue_id: 53ed091db33c30ef172172ef
            created: 1502951493
            created_by:
              user_id: 53ed091db33c30ef172172ed
              name: Alois Bělaška
              avatar: https://lh3.googleusercontent.com/-TBgNki-dgJs/AAAAAAAAAAI/AAAAAAADVq8/G8RPk8VD2ak/s50/photo.jpg
            name: Friends+Me
            state: enabled
            picture: https://lh3.googleusercontent.com/-dHBGGCq7AD4/AAAAAAAAAAI/AAAAAAAACps/jezO8o02B4Y/photo.jpg?sz=50
            service:
              type: google
              category: page
              id: 105750980959577516811
              url: https://plus.google.com/+FriendsPlusMe
            scheduling:
              timezone: Europe/Prague
              schedules:
              - days:
                - mon
                - tue
                times:
                - 10:35
                - 12:45
                - 20:30
            size: 28
          - queue_id: 53ed091db33c30ef172172f0
            created: 1502951573
            created_by:
              user_id: 53ed091db33c30ef172172ed
              name: Alois Bělaška
              avatar: https://lh3.googleusercontent.com/-TBgNki-dgJs/AAAAAAAAAAI/AAAAAAADVq8/G8RPk8VD2ak/s50/photo.jpg
            name: Friends+Me
            state: enabled
            picture: https://graph.facebook.com/207434606051711/picture?type=small
            service:
              type: facebook
              category: page
              id: 207434606051711
              url: https://www.facebook.com/207434606051711
            scheduling:
              timezone: Europe/Prague
              schedules:
              - days:
                - mon
                - tue
                times:
                - 10:35
                - 12:45
                - 20:30
            size: 8
      type: object
      properties:
        teams:
          description: List of teams.
          type: array
          items:
            $ref: '#/definitions/Team'
      required:
      - teams
  TeamResponse:
    title: Team Response
    allOf:
    - $ref: '#/definitions/Response'
    - example:
        ok: true
        team:
          team_id: 539c5b8bfb1d60bf42125524
          created: 1502951493
          name: Social Team
          members:
          - user_id: 53ed091db33c30ef172172ed
            name: Alois Bělaška
            role: owner
            avatar: https://lh3.googleusercontent.com/-TBgNki-dgJs/AAAAAAAAAAI/AAAAAAADVq8/G8RPk8VD2ak/s50/photo.jpg
          - user_id: 53ed091db33c30ef172172ee
            name: John Doe
            role: tmanager
            avatar: https://lh3.googleusercontent.com/image/-n-0L5nvI570/AAAAAAAAAAI/AAAAAAAAAAA/V0sHAqXP4pk/s50/photo.jpg
          queues:
          - queue_id: 53ed091db33c30ef172172ef
            created: 1502951493
            created_by:
              user_id: 53ed091db33c30ef172172ed
              name: Alois Bělaška
              avatar: https://lh3.googleusercontent.com/-TBgNki-dgJs/AAAAAAAAAAI/AAAAAAADVq8/G8RPk8VD2ak/s50/photo.jpg
            name: Friends+Me
            state: enabled
            picture: https://lh3.googleusercontent.com/-dHBGGCq7AD4/AAAAAAAAAAI/AAAAAAAACps/jezO8o02B4Y/photo.jpg?sz=50
            service:
              type: google
              category: page
              id: 105750980959577516811
              url: https://plus.google.com/+FriendsPlusMe
            scheduling:
              timezone: Europe/Prague
              schedules:
              - days:
                - mon
                - tue
                times:
                - 10:35
                - 12:45
                - 20:30
            size: 28
          - queue_id: 53ed091db33c30ef172172f0
            created: 1502951573
            created_by:
              user_id: 53ed091db33c30ef172172ed
              name: Alois Bělaška
              avatar: https://lh3.googleusercontent.com/-TBgNki-dgJs/AAAAAAAAAAI/AAAAAAADVq8/G8RPk8VD2ak/s50/photo.jpg
            name: Friends+Me
            state: enabled
            picture: https://graph.facebook.com/207434606051711/picture?type=small
            service:
              type: facebook
              category: page
              id: 207434606051711
              url: https://www.facebook.com/207434606051711
            scheduling:
              timezone: Europe/Prague
              schedules:
              - days:
                - mon
                - tue
                times:
                - 10:35
                - 12:45
                - 20:30
            size: 8
      type: object
      properties:
        team:
          $ref: '#/definitions/Team'
  QueuesResponse:
    title: Queues Response
    allOf:
    - $ref: '#/definitions/Response'
    - example:
        ok: true
        queues:
        - queue_id: 53ed091db33c30ef172172ef
          created: 1502951493
          created_by:
            user_id: 53ed091db33c30ef172172ed
            name: Alois Bělaška
            avatar: https://lh3.googleusercontent.com/-TBgNki-dgJs/AAAAAAAAAAI/AAAAAAADVq8/G8RPk8VD2ak/s50/photo.jpg
          name: Friends+Me
          state: enabled
          picture: https://lh3.googleusercontent.com/-dHBGGCq7AD4/AAAAAAAAAAI/AAAAAAAACps/jezO8o02B4Y/photo.jpg?sz=50
          service:
            type: google
            category: page
            id: 105750980959577516811
            url: https://plus.google.com/+FriendsPlusMe
          scheduling:
            timezone: Europe/Prague
            schedules:
            - days:
              - mon
              - tue
              times:
              - 10:35
              - 12:45
              - 20:30
          size: 28
        - queue_id: 53ed091db33c30ef172172f0
          created: 1502951573
          created_by:
            user_id: 53ed091db33c30ef172172ed
            name: Alois Bělaška
            avatar: https://lh3.googleusercontent.com/-TBgNki-dgJs/AAAAAAAAAAI/AAAAAAADVq8/G8RPk8VD2ak/s50/photo.jpg
          name: Friends+Me
          state: enabled
          picture: https://graph.facebook.com/207434606051711/picture?type=small
          service:
            type: facebook
            category: page
            id: 207434606051711
            url: https://www.facebook.com/207434606051711
          scheduling:
            timezone: Europe/Prague
            schedules:
            - days:
              - mon
              - tue
              times:
              - 10:35
              - 12:45
              - 20:30
          size: 8
      type: object
      properties:
        queues:
          description: List of queues.
          type: array
          items:
            $ref: '#/definitions/Queue'
      required:
      - queues
  QueueResponse:
    title: Queue Response
    allOf:
    - $ref: '#/definitions/Response'
    - example:
        ok: true
        queue:
          queue_id: 53ed091db33c30ef172172ef
          created: 1502951493
          created_by:
            user_id: 53ed091db33c30ef172172ed
            name: Alois Bělaška
            avatar: https://lh3.googleusercontent.com/-TBgNki-dgJs/AAAAAAAAAAI/AAAAAAADVq8/G8RPk8VD2ak/s50/photo.jpg
          name: Friends+Me
          state: enabled
          picture: https://lh3.googleusercontent.com/-dHBGGCq7AD4/AAAAAAAAAAI/AAAAAAAACps/jezO8o02B4Y/photo.jpg?sz=50
          service:
            type: google
            category: page
            id: 105750980959577516811
            url: https://plus.google.com/+FriendsPlusMe
          scheduling:
            timezone: Europe/Prague
            schedules:
            - days:
              - mon
              - tue
              times:
              - 10:35
              - 12:45
              - 20:30
          size: 28
      type: object
      properties:
        queue:
          $ref: '#/definitions/Queue'
  DeauthorizeResponse:
    title: Deauthorize Response
    allOf:
    - $ref: '#/definitions/Response'
    - example:
        ok: true
        deauthorized: true
      type: object
      properties:
        deauthorized:
          description: Whether the deautorization was successfull.
          type: boolean
      required:
      - deauthorized
  RefreshTokenRevokeResponse:
    title: Refresh Token Revoke Response
    allOf:
    - $ref: '#/definitions/Response'
    - example:
        ok: true
        revoked: true
      type: object
      properties:
        revoked:
          description: Whether the revoke was successfull.
          type: boolean
      required:
      - revoked
  RefreshTokenGrantResponse:
    title: Refresh Token Grant Response
    allOf:
    - $ref: '#/definitions/Response'
    - example:
        ok: true
        access_token: eyJ...MoQ
        expires_in: 86400
        refresh_token: GEbRxBN...edjnXbL
        scope: admin offline
        token_type: Bearer
      type: object
      properties:
        access_token:
          description: Newly generated access token.
          example: '"eyJ...MoQ"'
          type: string
        expires_in:
          description: Access token time to live in seconds.
          example: 86400
          type: number
          format: double
        scope:
          description: Set of granted scopes.
          example: admin offline
          type: string
        token_type:
          description: Type of access token.
          example: Bearer
          type: string
        refresh_token:
          description: Newly generated refresh token.
          example: GEbRxBN...edjnXbL
          type: string
      required:
      - access_token
      - expires_in
      - scope
      - token_type
  AuthorizationCodeGrantResponse:
    title: Authorization Code Grant Response
    allOf:
    - $ref: '#/definitions/Response'
    - example:
        ok: true
        access_token: eyJ...MoQ
        refresh_token: GEbRxBN...edjnXbL
        expires_in: 86400
        token_type: Bearer
      type: object
      properties:
        access_token:
          description: Generated access token.
          example: eyJ...MoQ
          type: string
        expires_in:
          description: Access token time to live in seconds.
          example: 86400
          type: number
          format: double
        token_type:
          description: Type of access token.
          example: Bearer
          type: string
        refresh_token:
          description: Generated refresh token.
          example: GEbRxBN...edjnXbL
          type: string
      required:
      - access_token
      - expires_in
      - token_type
  UserIdentityResponse:
    title: User Identity Response
    allOf:
    - $ref: '#/definitions/Response'
    - example:
        ok: true
        user:
          user_id: 53ed091db33c30ef172172ed
          name: Alois Bělaška
      type: object
      properties:
        user:
          $ref: '#/definitions/UserIdentityFull'
      required:
      - user
  UserInfoResponse:
    title: User Info Response
    allOf:
    - $ref: '#/definitions/Response'
    - example:
        ok: true
        user:
          user_id: 53ed091db33c30ef172172ed
          created: 1502951493
          name: Alois Bělaška
          email: alois@domain.com
          avatar: https://lh3.googleusercontent.com/-TBgNki-dgJs/AAAAAAAAAAI/AAAAAAADVq8/G8RPk8VD2ak/s50/photo.jpg
      type: object
      properties:
        user:
          $ref: '#/definitions/UserFull'
      required:
      - user
  PostsTimelineResponse:
    title: Posts Timeline Response
    allOf:
    - $ref: '#/definitions/Response'
    - type: object
      properties:
        posts:
          description: List of posts.
          type: array
          items:
            $ref: '#/definitions/Post'
        has_more:
          description: '`has_more` will be true if there is still more posts to fetch.'
          example: false
          type: boolean
        latest:
          description: '`completed_at` value of the latest post in the fetched list.'
          example: 1482570010
          type: number
          format: double
      required:
      - posts
      - has_more
  PostsQueueResponse:
    title: Posts Queue Response
    allOf:
    - $ref: '#/definitions/Response'
    - type: object
      properties:
        posts:
          description: List of posts.
          type: array
          items:
            $ref: '#/definitions/Post'
        has_more:
          description: '`has_more` will be true if there is still more posts to fetch.'
          example: false
          type: boolean
        latest:
          description: '`publish_at` value of the latest post in the fetched list.'
          example: 1482570010
          type: number
          format: double
      required:
      - posts
      - has_more
  PostResponse:
    title: Post Response
    allOf:
    - $ref: '#/definitions/Response'
    - type: object
      properties:
        post:
          $ref: '#/definitions/Post'
  PostDeleteResponse:
    title: Post Delete Response
    allOf:
    - $ref: '#/definitions/Response'
    - example:
        ok: true
        deleted: true
      type: object
      properties:
        deleted:
          description: Whether the post was deleted, false if the post was not found.
          example: true
          type: boolean
      required:
      - deleted
  PostCreateRequest:
    title: Post Create Request
    example:
      html: <p>Merry Christmas Everyone!</p>
      link: https://friendsplus.me
    type: object
    properties:
      html:
        description: Post in html format, allowed tags p,b,i,s.
        type: string
      link:
        description: ''
        type: string
      picture:
        description: ''
        type: string
      pictures:
        description: Array of picture urls to attach to the post. Property `link` will be ignored if `pictures` is set.
        type: array
        items:
          type: string
  PostCreateResponse:
    title: Post Create Response
    allOf:
    - $ref: '#/definitions/Response'
    - type: object
      properties:
        html_shortened:
          description: Whether the html (message) was shortened because of the message limit enforced by the destination service (Facebook, Twitter, ...).
          type: boolean
        post:
          $ref: '#/definitions/Post'
      required:
      - html_shortened
      - post
  PostUpdateRequest:
    title: Post Update Request
    type: object
    properties:
      html:
        description: Post in html format, allowed tags p,b,i,s.
        type: string
      link:
        description: ''
        type: string
      picture:
        description: ''
        type: string
      pictures:
        description: Array of picture urls to attach to the post. Property `link` will be ignored if `pictures` is set.
        type: array
        items:
          type: string
  PostUpdateResponse:
    title: Post Update Response
    allOf:
    - $ref: '#/definitions/Response'
    - type: object
      properties:
        post:
          $ref: '#/definitions/Post'
      required:
      - post
  PostRescheduleResponse:
    title: Post Reschedule Response
    allOf:
    - $ref: '#/definitions/Response'
    - type: object
      properties:
        post:
          $ref: '#/definitions/Post'
      required:
      - post
  PostPreviewResponse:
    title: Post Preview Response
    allOf:
    - $ref: '#/definitions/Response'
    - example:
        ok: true
        post:
          html: <p>Merry Christmas Everyone!</p>
          attachments:
          - type: link
            description: Publish at the right time, reach more customers and increase engagement. The right cross-promotion, content management and scheduling solution for you. Ramp Up Sales!
            title: Friends+Me - Share to ANYWHERE. Because sharing is caring.
            url: https://friendsplus.me
            picture:
              content_type: image/jpeg
              height: 827
              width: 1280
              url: https://lh3.googleusercontent.com/S3I41DrddGBWTqwgmrXv0-6b7zzeNBE73e3e_-HsMfK4Sk5NNjvaOQacCJeyUOuGXAfWeqi30Hnu1UgcI32adtIr2Ib8
            pictures:
            - content_type: image/jpeg
              height: 827
              width: 1280
              url: https://lh3.googleusercontent.com/S3I41DrddGBWTqwgmrXv0-6b7zzeNBE73e3e_-HsMfK4Sk5NNjvaOQacCJeyUOuGXAfWeqi30Hnu1UgcI32adtIr2Ib8
      type: object
      properties:
        post:
          $ref: '#/definitions/PostContent'
      required:
      - post
  QueueUpdateSchedulingRequest:
    title: Queue Update Scheduling Request
    example:
      timezone: Europe/Berlin
      schedules:
      - days:
        - mon
        - tue
        - wed
        - thu
        - fri
        - sat
        - sun
        times:
        - 9:25
        - 23:30
    type: object
    properties:
      timezone:
        description: Time zone name. [List of tz database time zones](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
        example: Europe/Prague
        type: string
      schedules:
        description: Set of schedules.
        type: array
        items:
          $ref: '#/definitions/QueueSchedule'
  DraftsResponse:
    title: Drafts Response
    allOf:
    - $ref: '#/definitions/Response'
    - example:
        ok: true
        latest: 1502969448
        has_more: false
        drafts:
        - draft_id: 5995531a055975000ff260c0
          created: 1502959448
          created_by:
            user_id: 53ed091db33c30ef172172ed
            name: Alois Bělaška
            avatar: https://lh3.googleusercontent.com/-TBgNki-dgJs/AAAAAAAAAAI/AAAAAAADVq8/G8RPk8VD2ak/s50/photo.jpg
          modified: 1502969448
          modified_by:
            user_id: 53ed091db33c30ef172172ed
            name: Alois Bělaška
            avatar: https://lh3.googleusercontent.com/-TBgNki-dgJs/AAAAAAAAAAI/AAAAAAADVq8/G8RPk8VD2ak/s50/photo.jpg
          html: <p>Merry Christmas Everyone!</p>
          attachments:
          - type: link
            description: Publish at the right time, reach more customers and increase engagement. The right cross-promotion, content management and scheduling solution for you. Ramp Up Sales!
            title: Friends+Me - Share to ANYWHERE. Because sharing is caring.
            url: https://friendsplus.me
            picture:
              content_type: image/jpeg
              height: 827
              width: 1280
              url: https://lh3.googleusercontent.com/S3I41DrddGBWTqwgmrXv0-6b7zzeNBE73e3e_-HsMfK4Sk5NNjvaOQacCJeyUOuGXAfWeqi30Hnu1UgcI32adtIr2Ib8
      type: object
      properties:
        drafts:
          description: List of drafts.
          type: array
          items:
            $ref: '#/definitions/Draft'
        has_more:
          description: '`has_more` will be true if there is still more drafts to fetch.'
          example: false
          type: boolean
        latest:
          description: '`modified` value of the latest draft in the fetched list.'
          example: 1482570010
          type: number
          format: double
      required:
      - drafts
      - has_more
  DraftResponse:
    title: Draft Response
    allOf:
    - $ref: '#/definitions/Response'
    - example:
        ok: true
        draft:
          draft_id: 5995531a055975000ff260c0
          created: 1502959448
          created_by:
            user_id: 53ed091db33c30ef172172ed
            name: Alois Bělaška
            avatar: https://lh3.googleusercontent.com/-TBgNki-dgJs/AAAAAAAAAAI/AAAAAAADVq8/G8RPk8VD2ak/s50/photo.jpg
          modified: 1502969448
          modified_by:
            user_id: 53ed091db33c30ef172172ed
            name: Alois Bělaška
            avatar: https://lh3.googleusercontent.com/-TBgNki-dgJs/AAAAAAAAAAI/AAAAAAADVq8/G8RPk8VD2ak/s50/photo.jpg
          html: <p>Merry Christmas Everyone!</p>
          attachments:
          - type: link
            description: Publish at the right time, reach more customers and increase engagement. The right cross-promotion, content management and scheduling solution for you. Ramp Up Sales!
            title: Friends+Me - Share to ANYWHERE. Because sharing is caring.
            url: https://friendsplus.me
            picture:
              content_type: image/jpeg
              height: 827
              width: 1280
              url: https://lh3.googleusercontent.com/S3I41DrddGBWTqwgmrXv0-6b7zzeNBE73e3e_-HsMfK4Sk5NNjvaOQacCJeyUOuGXAfWeqi30Hnu1UgcI32adtIr2Ib8
      type: object
      properties:
        draft:
          $ref: '#/definitions/Draft'
  DraftPreviewResponse:
    title: Draft Preview Response
    allOf:
    - $ref: '#/definitions/Response'
    - type: object
      properties:
        draft:
          $ref: '#/definitions/DraftContent'
      required:
      - draft
  DraftDeleteResponse:
    title: Draft Delete Response
    allOf:
    - $ref: '#/definitions/Response'
    - example:
        ok: true
        deleted: true
      type: object
      properties:
        deleted:
          description: Whether the draft was deleted, false if the draft was not found.
          example: true
          type: boolean
      required:
      - deleted
  DraftScheduleResponse:
    title: Draft Schedule Response
    allOf:
    - $ref: '#/definitions/Response'
    - type: object
      properties:
        post:
          $ref: '#/definitions/Post'
      required:
      - post
  DraftCreateRequest:
    title: Draft Create Request
    example:
      html: <p>Merry Christmas Everyone!</p>
      link: https://friendsplus.me
    type: object
    properties:
      html:
        description: Post in html format, allowed tags p,b,i,s.
        type: string
      link:
        description: ''
        type: string
      picture:
        description: ''
        type: string
      pictures:
        description: Array of picture urls to attach to the post. Property `link` will be ignored if `pictures` is set.
        type: array
        items:
          type: string
  DraftCreateResponse:
    title: Draft Create Response
    allOf:
    - $ref: '#/definitions/Response'
    - example:
        ok: true
        draft:
          draft_id: 5995531a055975000ff260c0
          created: 1502959448
          created_by:
            user_id: 53ed091db33c30ef172172ed
            name: Alois Bělaška
            avatar: https://lh3.googleusercontent.com/-TBgNki-dgJs/AAAAAAAAAAI/AAAAAAADVq8/G8RPk8VD2ak/s50/photo.jpg
          modified: 1502969448
          modified_by:
            user_id: 53ed091db33c30ef172172ed
            name: Alois Bělaška
            avatar: https://lh3.googleusercontent.com/-TBgNki-dgJs/AAAAAAAAAAI/AAAAAAADVq8/G8RPk8VD2ak/s50/photo.jpg
          html: <p>Merry Christmas Everyone!</p>
          attachments:
          - type: link
            description: Publish at the right time, reach more customers and increase engagement. The right cross-promotion, content management and scheduling solution for you. Ramp Up Sales!
            title: Friends+Me - Share to ANYWHERE. Because sharing is caring.
            url: https://friendsplus.me
            picture:
              content_type: image/jpeg
              height: 827
              width: 1280
              url: https://lh3.googleusercontent.com/S3I41DrddGBWTqwgmrXv0-6b7zzeNBE73e3e_-HsMfK4Sk5NNjvaOQacCJeyUOuGXAfWeqi30Hnu1UgcI32adtIr2Ib8
      type: object
      properties:
        draft:
          $ref: '#/definitions/Draft'
      required:
      - draft
  DraftUpdateRequest:
    title: Draft Update Request
    example:
      html: <p>Merry Christmas Everyone And Happy New Year</p>
    type: object
    properties:
      html:
        description: Post in html format, allowed tags p,b,i,s.
        type: string
      link:
        description: ''
        type: string
      picture:
        description: ''
        type: string
      pictures:
        description: Array of picture urls to attach to the post. Property `link` will be ignored if `pictures` is set.
        type: array
        items:
          type: string
  DraftUpdateResponse:
    title: Draft Update Response
    allOf:
    - $ref: '#/definitions/Response'
    - example:
        ok: true
        draft:
          draft_id: 5995531a055975000ff260c0
          created: 1502959448
          created_by:
            user_id: 53ed091db33c30ef172172ed
            name: Alois Bělaška
            avatar: https://lh3.googleusercontent.com/-TBgNki-dgJs/AAAAAAAAAAI/AAAAAAADVq8/G8RPk8VD2ak/s50/photo.jpg
          modified: 1502969448
          modified_by:
            user_id: 53ed091db33c30ef172172ed
            name: Alois Bělaška
            avatar: https://lh3.googleusercontent.com/-TBgNki-dgJs/AAAAAAAAAAI/AAAAAAADVq8/G8RPk8VD2ak/s50/photo.jpg
          html: <p>Merry Christmas Everyone And Happy New Year</p>
          attachments:
          - type: link
            description: Publish at the right time, reach more customers and increase engagement. The right cross-promotion, content management and scheduling solution for you. Ramp Up Sales!
            title: Friends+Me - Share to ANYWHERE. Because sharing is caring.
            url: https://friendsplus.me
            picture:
              content_type: image/jpeg
              height: 827
              width: 1280
              url: https://lh3.googleusercontent.com/S3I41DrddGBWTqwgmrXv0-6b7zzeNBE73e3e_-HsMfK4Sk5NNjvaOQacCJeyUOuGXAfWeqi30Hnu1UgcI32adtIr2Ib8
      type: object
      properties:
        draft:
          $ref: '#/definitions/Draft'
      required:
      - draft